{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _get = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _classCallCheck = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChangeStreamCursor = exports.ChangeStream = void 0;\n\nvar Denque = require(\"denque\");\n\nvar error_1 = require(\"./error\");\n\nvar aggregate_1 = require(\"./operations/aggregate\");\n\nvar utils_1 = require(\"./utils\");\n\nvar mongo_client_1 = require(\"./mongo_client\");\n\nvar db_1 = require(\"./db\");\n\nvar collection_1 = require(\"./collection\");\n\nvar abstract_cursor_1 = require(\"./cursor/abstract_cursor\");\n\nvar execute_operation_1 = require(\"./operations/execute_operation\");\n\nvar mongo_types_1 = require(\"./mongo_types\");\n/** @internal */\n\n\nvar kResumeQueue = Symbol('resumeQueue');\n/** @internal */\n\nvar kCursorStream = Symbol('cursorStream');\n/** @internal */\n\nvar kClosed = Symbol('closed');\n/** @internal */\n\nvar kMode = Symbol('mode');\nvar CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument'];\nvar CURSOR_OPTIONS = ['batchSize', 'maxAwaitTimeMS', 'collation', 'readPreference'].concat(CHANGE_STREAM_OPTIONS);\nvar CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\nvar NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nvar NO_CURSOR_ERROR = 'ChangeStream has no cursor';\nvar CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\n\nvar ChangeStream = /*#__PURE__*/function (_mongo_types_1$TypedE) {\n  _inherits(ChangeStream, _mongo_types_1$TypedE);\n\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  function ChangeStream(parent) {\n    var _this;\n\n    var pipeline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, ChangeStream);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChangeStream).call(this));\n    _this.pipeline = pipeline;\n    _this.options = options;\n\n    if (parent instanceof collection_1.Collection) {\n      _this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof db_1.Db) {\n      _this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof mongo_client_1.MongoClient) {\n      _this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n    }\n\n    _this.parent = parent;\n    _this.namespace = parent.s.namespace;\n\n    if (!_this.options.readPreference && parent.readPreference) {\n      _this.options.readPreference = parent.readPreference;\n    }\n\n    _this[kResumeQueue] = new Denque(); // Create contained Change Stream cursor\n\n    _this.cursor = createChangeStreamCursor(_assertThisInitialized(_assertThisInitialized(_this)), options);\n    _this[kClosed] = false;\n    _this[kMode] = false; // Listen for any `change` listeners being added to ChangeStream\n\n    _this.on('newListener', function (eventName) {\n      if (eventName === 'change' && _this.cursor && _this.listenerCount('change') === 0) {\n        streamEvents(_assertThisInitialized(_assertThisInitialized(_this)), _this.cursor);\n      }\n    });\n\n    _this.on('removeListener', function (eventName) {\n      var _a;\n\n      if (eventName === 'change' && _this.listenerCount('change') === 0 && _this.cursor) {\n        (_a = _this[kCursorStream]) === null || _a === void 0 ? void 0 : _a.removeAllListeners('data');\n      }\n    });\n\n    return _this;\n  }\n  /** @internal */\n\n\n  _createClass(ChangeStream, [{\n    key: \"hasNext\",\n    value: function hasNext(callback) {\n      var _this2 = this;\n\n      setIsIterator(this);\n      return (0, utils_1.maybePromise)(callback, function (cb) {\n        getCursor(_this2, function (err, cursor) {\n          if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n          cursor.hasNext(cb);\n        });\n      });\n    }\n  }, {\n    key: \"next\",\n    value: function next(callback) {\n      var _this3 = this;\n\n      setIsIterator(this);\n      return (0, utils_1.maybePromise)(callback, function (cb) {\n        getCursor(_this3, function (err, cursor) {\n          if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n          cursor.next(function (error, change) {\n            if (error) {\n              _this3[kResumeQueue].push(function () {\n                return _this3.next(cb);\n              });\n\n              processError(_this3, error, cb);\n              return;\n            }\n\n            processNewChange(_this3, change, cb);\n          });\n        });\n      });\n    }\n    /** Is the cursor closed */\n\n  }, {\n    key: \"close\",\n\n    /** Close the Change Stream */\n    value: function close(callback) {\n      var _this4 = this;\n\n      this[kClosed] = true;\n      return (0, utils_1.maybePromise)(callback, function (cb) {\n        if (!_this4.cursor) {\n          return cb();\n        }\n\n        var cursor = _this4.cursor;\n        return cursor.close(function (err) {\n          endStream(_this4);\n          _this4.cursor = undefined;\n          return cb(err);\n        });\n      });\n    }\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     * @throws MongoDriverError if this.cursor is undefined\n     */\n\n  }, {\n    key: \"stream\",\n    value: function stream(options) {\n      this.streamOptions = options;\n      if (!this.cursor) throw new error_1.MongoChangeStreamError(NO_CURSOR_ERROR);\n      return this.cursor.stream(options);\n    }\n  }, {\n    key: \"tryNext\",\n    value: function tryNext(callback) {\n      var _this5 = this;\n\n      setIsIterator(this);\n      return (0, utils_1.maybePromise)(callback, function (cb) {\n        getCursor(_this5, function (err, cursor) {\n          if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n          return cursor.tryNext(cb);\n        });\n      });\n    }\n  }, {\n    key: \"cursorStream\",\n    get: function get() {\n      return this[kCursorStream];\n    }\n    /** The cached resume token that is used to resume after the most recently returned change. */\n\n  }, {\n    key: \"resumeToken\",\n    get: function get() {\n      var _a;\n\n      return (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.resumeToken;\n    }\n  }, {\n    key: \"closed\",\n    get: function get() {\n      var _a, _b;\n\n      return this[kClosed] || ((_b = (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.closed) !== null && _b !== void 0 ? _b : false);\n    }\n  }]);\n\n  return ChangeStream;\n}(mongo_types_1.TypedEventEmitter);\n\nexports.ChangeStream = ChangeStream;\n/** @event */\n\nChangeStream.RESPONSE = 'response';\n/** @event */\n\nChangeStream.MORE = 'more';\n/** @event */\n\nChangeStream.INIT = 'init';\n/** @event */\n\nChangeStream.CLOSE = 'close';\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\n\nChangeStream.CHANGE = 'change';\n/** @event */\n\nChangeStream.END = 'end';\n/** @event */\n\nChangeStream.ERROR = 'error';\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\n\nChangeStream.RESUME_TOKEN_CHANGED = 'resumeTokenChanged';\n/** @internal */\n\nvar ChangeStreamCursor = /*#__PURE__*/function (_abstract_cursor_1$Ab) {\n  _inherits(ChangeStreamCursor, _abstract_cursor_1$Ab);\n\n  function ChangeStreamCursor(topology, namespace) {\n    var _this6;\n\n    var pipeline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    _classCallCheck(this, ChangeStreamCursor);\n\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(ChangeStreamCursor).call(this, topology, namespace, options));\n    _this6.pipeline = pipeline;\n    _this6.options = options;\n    _this6._resumeToken = null;\n    _this6.startAtOperationTime = options.startAtOperationTime;\n\n    if (options.startAfter) {\n      _this6.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      _this6.resumeToken = options.resumeAfter;\n    }\n\n    return _this6;\n  }\n\n  _createClass(ChangeStreamCursor, [{\n    key: \"cacheResumeToken\",\n    value: function cacheResumeToken(resumeToken) {\n      if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n        this.resumeToken = this.postBatchResumeToken;\n      } else {\n        this.resumeToken = resumeToken;\n      }\n\n      this.hasReceived = true;\n    }\n  }, {\n    key: \"_processBatch\",\n    value: function _processBatch(batchName, response) {\n      var cursor = (response === null || response === void 0 ? void 0 : response.cursor) || {};\n\n      if (cursor.postBatchResumeToken) {\n        this.postBatchResumeToken = cursor.postBatchResumeToken;\n\n        if (cursor[batchName].length === 0) {\n          this.resumeToken = cursor.postBatchResumeToken;\n        }\n      }\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new ChangeStreamCursor(this.topology, this.namespace, this.pipeline, _objectSpread({}, this.cursorOptions));\n    }\n  }, {\n    key: \"_initialize\",\n    value: function _initialize(session, callback) {\n      var _this7 = this;\n\n      var aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, _objectSpread({}, this.cursorOptions, this.options, {\n        session: session\n      }));\n      (0, execute_operation_1.executeOperation)(this.topology, aggregateOperation, function (err, response) {\n        if (err || response == null) {\n          return callback(err);\n        }\n\n        var server = aggregateOperation.server;\n\n        if (_this7.startAtOperationTime == null && _this7.resumeAfter == null && _this7.startAfter == null && (0, utils_1.maxWireVersion)(server) >= 7) {\n          _this7.startAtOperationTime = response.operationTime;\n        }\n\n        _this7._processBatch('firstBatch', response);\n\n        _this7.emit(ChangeStream.INIT, response);\n\n        _this7.emit(ChangeStream.RESPONSE); // TODO: NODE-2882\n\n\n        callback(undefined, {\n          server: server,\n          session: session,\n          response: response\n        });\n      });\n    }\n  }, {\n    key: \"_getMore\",\n    value: function _getMore(batchSize, callback) {\n      var _this8 = this;\n\n      _get(_getPrototypeOf(ChangeStreamCursor.prototype), \"_getMore\", this).call(this, batchSize, function (err, response) {\n        if (err) {\n          return callback(err);\n        }\n\n        _this8._processBatch('nextBatch', response);\n\n        _this8.emit(ChangeStream.MORE, response);\n\n        _this8.emit(ChangeStream.RESPONSE);\n\n        callback(err, response);\n      });\n    }\n  }, {\n    key: \"resumeToken\",\n    set: function set(token) {\n      this._resumeToken = token;\n      this.emit(ChangeStream.RESUME_TOKEN_CHANGED, token);\n    },\n    get: function get() {\n      return this._resumeToken;\n    }\n  }, {\n    key: \"resumeOptions\",\n    get: function get() {\n      var result = {};\n\n      var _iterator = _createForOfIteratorHelper(CURSOR_OPTIONS),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var optionName = _step.value;\n\n          if (Reflect.has(this.options, optionName)) {\n            Reflect.set(result, optionName, Reflect.get(this.options, optionName));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (this.resumeToken || this.startAtOperationTime) {\n        ['resumeAfter', 'startAfter', 'startAtOperationTime'].forEach(function (key) {\n          return Reflect.deleteProperty(result, key);\n        });\n\n        if (this.resumeToken) {\n          var resumeKey = this.options.startAfter && !this.hasReceived ? 'startAfter' : 'resumeAfter';\n          Reflect.set(result, resumeKey, this.resumeToken);\n        } else if (this.startAtOperationTime && (0, utils_1.maxWireVersion)(this.server) >= 7) {\n          result.startAtOperationTime = this.startAtOperationTime;\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return ChangeStreamCursor;\n}(abstract_cursor_1.AbstractCursor);\n\nexports.ChangeStreamCursor = ChangeStreamCursor;\nvar CHANGE_STREAM_EVENTS = [ChangeStream.RESUME_TOKEN_CHANGED, ChangeStream.END, ChangeStream.CLOSE];\n\nfunction setIsEmitter(changeStream) {\n  if (changeStream[kMode] === 'iterator') {\n    // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n    throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n  }\n\n  changeStream[kMode] = 'emitter';\n}\n\nfunction setIsIterator(changeStream) {\n  if (changeStream[kMode] === 'emitter') {\n    // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n    throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n  }\n\n  changeStream[kMode] = 'iterator';\n}\n/**\n * Create a new change stream cursor based on self's configuration\n * @internal\n */\n\n\nfunction createChangeStreamCursor(changeStream, options) {\n  var changeStreamStageOptions = {\n    fullDocument: options.fullDocument || 'default'\n  };\n  applyKnownOptions(changeStreamStageOptions, options, CHANGE_STREAM_OPTIONS);\n\n  if (changeStream.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n    changeStreamStageOptions.allChangesForCluster = true;\n  }\n\n  var pipeline = [{\n    $changeStream: changeStreamStageOptions\n  }].concat(changeStream.pipeline);\n  var cursorOptions = applyKnownOptions({}, options, CURSOR_OPTIONS);\n  var changeStreamCursor = new ChangeStreamCursor((0, utils_1.getTopology)(changeStream.parent), changeStream.namespace, pipeline, cursorOptions);\n\n  var _iterator2 = _createForOfIteratorHelper(CHANGE_STREAM_EVENTS),\n      _step2;\n\n  try {\n    var _loop = function _loop() {\n      var event = _step2.value;\n      changeStreamCursor.on(event, function (e) {\n        return changeStream.emit(event, e);\n      });\n    };\n\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  if (changeStream.listenerCount(ChangeStream.CHANGE) > 0) {\n    streamEvents(changeStream, changeStreamCursor);\n  }\n\n  return changeStreamCursor;\n}\n\nfunction applyKnownOptions(target, source, optionNames) {\n  optionNames.forEach(function (name) {\n    if (source[name]) {\n      target[name] = source[name];\n    }\n  });\n  return target;\n} // This method performs a basic server selection loop, satisfying the requirements of\n// ChangeStream resumability until the new SDAM layer can be used.\n\n\nvar SELECTION_TIMEOUT = 30000;\n\nfunction waitForTopologyConnected(topology, options, callback) {\n  setTimeout(function () {\n    if (options && options.start == null) {\n      options.start = (0, utils_1.now)();\n    }\n\n    var start = options.start || (0, utils_1.now)();\n    var timeout = options.timeout || SELECTION_TIMEOUT;\n\n    if (topology.isConnected()) {\n      return callback();\n    }\n\n    if ((0, utils_1.calculateDurationInMs)(start) > timeout) {\n      // TODO(NODE-3497): Replace with MongoNetworkTimeoutError\n      return callback(new error_1.MongoRuntimeError('Timed out waiting for connection'));\n    }\n\n    waitForTopologyConnected(topology, options, callback);\n  }, 500); // this is an arbitrary wait time to allow SDAM to transition\n}\n\nfunction closeWithError(changeStream, error, callback) {\n  if (!callback) {\n    changeStream.emit(ChangeStream.ERROR, error);\n  }\n\n  changeStream.close(function () {\n    return callback && callback(error);\n  });\n}\n\nfunction streamEvents(changeStream, cursor) {\n  setIsEmitter(changeStream);\n  var stream = changeStream[kCursorStream] || cursor.stream();\n  changeStream[kCursorStream] = stream;\n  stream.on('data', function (change) {\n    return processNewChange(changeStream, change);\n  });\n  stream.on('error', function (error) {\n    return processError(changeStream, error);\n  });\n}\n\nfunction endStream(changeStream) {\n  var cursorStream = changeStream[kCursorStream];\n\n  if (cursorStream) {\n    ['data', 'close', 'end', 'error'].forEach(function (event) {\n      return cursorStream.removeAllListeners(event);\n    });\n    cursorStream.destroy();\n  }\n\n  changeStream[kCursorStream] = undefined;\n}\n\nfunction processNewChange(changeStream, change, callback) {\n  var _a;\n\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    if (callback) callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  } // a null change means the cursor has been notified, implicitly closing the change stream\n\n\n  if (change == null) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    return closeWithError(changeStream, new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR), callback);\n  }\n\n  if (change && !change._id) {\n    return closeWithError(changeStream, new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR), callback);\n  } // cache the resume token\n\n\n  (_a = changeStream.cursor) === null || _a === void 0 ? void 0 : _a.cacheResumeToken(change._id); // wipe the startAtOperationTime if there was one so that there won't be a conflict\n  // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n\n  changeStream.options.startAtOperationTime = undefined; // Return the change\n\n  if (!callback) return changeStream.emit(ChangeStream.CHANGE, change);\n  return callback(undefined, change);\n}\n\nfunction processError(changeStream, error, callback) {\n  var cursor = changeStream.cursor; // If the change stream has been closed explicitly, do not process error.\n\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    if (callback) callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  } // if the resume succeeds, continue with the new cursor\n\n\n  function resumeWithCursor(newCursor) {\n    changeStream.cursor = newCursor;\n    processResumeQueue(changeStream);\n  } // otherwise, raise an error and close the change stream\n\n\n  function unresumableError(err) {\n    if (!callback) {\n      changeStream.emit(ChangeStream.ERROR, err);\n    }\n\n    changeStream.close(function () {\n      return processResumeQueue(changeStream, err);\n    });\n  }\n\n  if (cursor && (0, error_1.isResumableError)(error, (0, utils_1.maxWireVersion)(cursor.server))) {\n    changeStream.cursor = undefined; // stop listening to all events from old cursor\n\n    endStream(changeStream); // close internal cursor, ignore errors\n\n    cursor.close();\n    var topology = (0, utils_1.getTopology)(changeStream.parent);\n    waitForTopologyConnected(topology, {\n      readPreference: cursor.readPreference\n    }, function (err) {\n      // if the topology can't reconnect, close the stream\n      if (err) return unresumableError(err); // create a new cursor, preserving the old cursor's options\n\n      var newCursor = createChangeStreamCursor(changeStream, cursor.resumeOptions); // attempt to continue in emitter mode\n\n      if (!callback) return resumeWithCursor(newCursor); // attempt to continue in iterator mode\n\n      newCursor.hasNext(function (err) {\n        // if there's an error immediately after resuming, close the stream\n        if (err) return unresumableError(err);\n        resumeWithCursor(newCursor);\n      });\n    });\n    return;\n  } // if initial error wasn't resumable, raise an error and close the change stream\n\n\n  return closeWithError(changeStream, error, callback);\n}\n/**\n * Safely provides a cursor across resume attempts\n *\n * @param changeStream - the parent ChangeStream\n */\n\n\nfunction getCursor(changeStream, callback) {\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  } // if a cursor exists and it is open, return it\n\n\n  if (changeStream.cursor) {\n    callback(undefined, changeStream.cursor);\n    return;\n  } // no cursor, queue callback until topology reconnects\n\n\n  changeStream[kResumeQueue].push(callback);\n}\n/**\n * Drain the resume queue when a new has become available\n *\n * @param changeStream - the parent ChangeStream\n * @param err - error getting a new cursor\n */\n\n\nfunction processResumeQueue(changeStream, err) {\n  while (changeStream[kResumeQueue].length) {\n    var request = changeStream[kResumeQueue].pop();\n    if (!request) break; // Should never occur but TS can't use the length check in the while condition\n\n    if (!err) {\n      if (changeStream[kClosed]) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        request(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n        return;\n      }\n\n      if (!changeStream.cursor) {\n        request(new error_1.MongoChangeStreamError(NO_CURSOR_ERROR));\n        return;\n      }\n    }\n\n    request(err, changeStream.cursor);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}