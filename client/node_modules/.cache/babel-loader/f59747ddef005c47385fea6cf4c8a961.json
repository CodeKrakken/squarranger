{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Encrypter = void 0;\n/* eslint-disable @typescript-eslint/no-var-requires */\n\nvar mongo_client_1 = require(\"./mongo_client\");\n\nvar error_1 = require(\"./error\");\n\nvar bson_1 = require(\"./bson\");\n\nvar connect_1 = require(\"./operations/connect\");\n\nvar AutoEncrypterClass;\n/** @internal */\n\nvar kInternalClient = Symbol('internalClient');\n/** @internal */\n\nvar Encrypter = /*#__PURE__*/function () {\n  function Encrypter(client, uri, options) {\n    _classCallCheck(this, Encrypter);\n\n    if (typeof options.autoEncryption !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n    }\n\n    this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n    this.needsConnecting = false;\n\n    if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = client;\n    } else if (options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (this.bypassAutoEncryption) {\n      options.autoEncryption.metadataClient = undefined;\n    } else if (options.maxPoolSize === 0) {\n      options.autoEncryption.metadataClient = client;\n    } else {\n      options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n    }\n\n    options.autoEncryption.bson = Object.create(null); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    options.autoEncryption.bson.serialize = bson_1.serialize; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    options.autoEncryption.bson.deserialize = bson_1.deserialize;\n    this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n  }\n\n  _createClass(Encrypter, [{\n    key: \"getInternalClient\",\n    value: function getInternalClient(client, uri, options) {\n      var _this = this;\n\n      if (!this[kInternalClient]) {\n        var clonedOptions = {};\n\n        for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {\n          var key = _Object$keys[_i];\n          if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key)) continue;\n          Reflect.set(clonedOptions, key, Reflect.get(options, key));\n        }\n\n        clonedOptions.minPoolSize = 0;\n        this[kInternalClient] = new mongo_client_1.MongoClient(uri, clonedOptions);\n\n        var _iterator = _createForOfIteratorHelper(connect_1.MONGO_CLIENT_EVENTS),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var eventName = _step.value;\n\n            var _iterator2 = _createForOfIteratorHelper(client.listeners(eventName)),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var listener = _step2.value;\n                this[kInternalClient].on(eventName, listener);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        client.on('newListener', function (eventName, listener) {\n          _this[kInternalClient].on(eventName, listener);\n        });\n        this.needsConnecting = true;\n      }\n\n      return this[kInternalClient];\n    }\n  }, {\n    key: \"connectInternalClient\",\n    value: function connectInternalClient(callback) {\n      if (this.needsConnecting) {\n        this.needsConnecting = false;\n        return this[kInternalClient].connect(callback);\n      }\n\n      return callback();\n    }\n  }, {\n    key: \"close\",\n    value: function close(client, force, callback) {\n      var _this2 = this;\n\n      this.autoEncrypter.teardown(!!force, function (e) {\n        if (_this2[kInternalClient] && client !== _this2[kInternalClient]) {\n          return _this2[kInternalClient].close(force, callback);\n        }\n\n        callback(e);\n      });\n    }\n  }], [{\n    key: \"checkForMongoCrypt\",\n    value: function checkForMongoCrypt() {\n      var mongodbClientEncryption = undefined;\n\n      try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        mongodbClientEncryption = require('mongodb-client-encryption');\n      } catch (err) {\n        throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' + 'Please add `mongodb-client-encryption` as a dependency of your project');\n      }\n\n      AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n    }\n  }]);\n\n  return Encrypter;\n}();\n\nexports.Encrypter = Encrypter;","map":null,"metadata":{},"sourceType":"script"}