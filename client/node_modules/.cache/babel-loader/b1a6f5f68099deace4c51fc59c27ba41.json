{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _objectSpread = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar _slicedToArray = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _templateObject;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.checkTLSOptions = exports.resolveSRVRecord = void 0;\n\nvar dns = require(\"dns\");\n\nvar fs = require(\"fs\");\n\nvar mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\n\nvar url_1 = require(\"url\");\n\nvar defaultAuthProviders_1 = require(\"./cmap/auth/defaultAuthProviders\");\n\nvar read_preference_1 = require(\"./read_preference\");\n\nvar read_concern_1 = require(\"./read_concern\");\n\nvar write_concern_1 = require(\"./write_concern\");\n\nvar error_1 = require(\"./error\");\n\nvar utils_1 = require(\"./utils\");\n\nvar mongo_client_1 = require(\"./mongo_client\");\n\nvar mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\n\nvar logger_1 = require(\"./logger\");\n\nvar promise_provider_1 = require(\"./promise_provider\");\n\nvar encrypter_1 = require(\"./encrypter\");\n\nvar compression_1 = require(\"./cmap/wire_protocol/compression\");\n\nvar VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nvar LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nvar LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nvar LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  var regex = /^.*?\\./;\n  var srv = \".\".concat(srvAddress.replace(regex, ''));\n  var parent = \".\".concat(parentDomain.replace(regex, ''));\n  return srv.endsWith(parent);\n}\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\n\n\nfunction resolveSRVRecord(options, callback) {\n  if (typeof options.srvHost !== 'string') {\n    return callback(new error_1.MongoAPIError('Option \"srvHost\" must not be empty'));\n  }\n\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    return callback(new error_1.MongoAPIError('URI must include hostname, domain name, and tld'));\n  } // Resolve the SRV record and use the result as the list of hosts to connect to.\n\n\n  var lookupAddress = options.srvHost;\n  dns.resolveSrv(\"_\".concat(options.srvServiceName, \"._tcp.\").concat(lookupAddress), function (err, addresses) {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new error_1.MongoAPIError('No addresses found at host'));\n    }\n\n    var _iterator = _createForOfIteratorHelper(addresses),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var name = _step.value.name;\n\n        if (!matchesParentDomain(name, lookupAddress)) {\n          return callback(new error_1.MongoAPIError('Server record does not share hostname with parent URI'));\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    var hostAddresses = addresses.map(function (r) {\n      var _a;\n\n      return utils_1.HostAddress.fromString(\"\".concat(r.name, \":\").concat((_a = r.port) !== null && _a !== void 0 ? _a : 27017));\n    });\n    var lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n\n    if (lbError) {\n      return callback(lbError);\n    } // Resolve TXT record and add options from there if they exist.\n\n\n    dns.resolveTxt(lookupAddress, function (err, record) {\n      var _a, _b, _c;\n\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n      } else {\n        if (record.length > 1) {\n          return callback(new error_1.MongoParseError('Multiple text records not allowed'));\n        }\n\n        var txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n\n        var txtRecordOptionKeys = _toConsumableArray(txtRecordOptions.keys());\n\n        if (txtRecordOptionKeys.some(function (key) {\n          return !VALID_TXT_RECORDS.includes(key);\n        })) {\n          return callback(new error_1.MongoParseError(\"Text record may only set any of: \".concat(VALID_TXT_RECORDS.join(', '))));\n        }\n\n        if (VALID_TXT_RECORDS.some(function (option) {\n          return txtRecordOptions.get(option) === '';\n        })) {\n          return callback(new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record'));\n        }\n\n        var source = (_a = txtRecordOptions.get('authSource')) !== null && _a !== void 0 ? _a : undefined;\n        var replicaSet = (_b = txtRecordOptions.get('replicaSet')) !== null && _b !== void 0 ? _b : undefined;\n        var loadBalanced = (_c = txtRecordOptions.get('loadBalanced')) !== null && _c !== void 0 ? _c : undefined;\n\n        if (!options.userSpecifiedAuthSource && source) {\n          options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n            source: source\n          });\n        }\n\n        if (!options.userSpecifiedReplicaSet && replicaSet) {\n          options.replicaSet = replicaSet;\n        }\n\n        if (loadBalanced === 'true') {\n          options.loadBalanced = true;\n        }\n\n        if (options.replicaSet && options.srvMaxHosts > 0) {\n          return callback(new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts'));\n        }\n\n        var _lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n\n        if (_lbError) {\n          return callback(_lbError);\n        }\n      }\n\n      callback(undefined, hostAddresses);\n    });\n  });\n}\n\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param options - The options used for options parsing\n * @throws MongoParseError if TLS options are invalid\n */\n\nfunction checkTLSOptions(options) {\n  if (!options) return;\n\n  var check = function check(a, b) {\n    if (Reflect.has(options, a) && Reflect.has(options, b)) {\n      throw new error_1.MongoParseError(\"The '\".concat(a, \"' option cannot be used with '\").concat(b, \"'\"));\n    }\n  };\n\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\n\nexports.checkTLSOptions = checkTLSOptions;\nvar TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nvar FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\n\nfunction getBoolean(name, value) {\n  if (typeof value === 'boolean') return value;\n  var valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) return true;\n  if (FALSEHOODS.has(valueString)) return false;\n  throw new error_1.MongoParseError(\"Expected \".concat(name, \" to be stringified boolean value, got: \").concat(value));\n}\n\nfunction getInt(name, value) {\n  if (typeof value === 'number') return Math.trunc(value);\n  var parsedValue = Number.parseInt(String(value), 10);\n  if (!Number.isNaN(parsedValue)) return parsedValue;\n  throw new error_1.MongoParseError(\"Expected \".concat(name, \" to be stringified int value, got: \").concat(value));\n}\n\nfunction getUint(name, value) {\n  var parsedValue = getInt(name, value);\n\n  if (parsedValue < 0) {\n    throw new error_1.MongoParseError(\"\".concat(name, \" can only be a positive int value, got: \").concat(value));\n  }\n\n  return parsedValue;\n}\n\nfunction toRecord(value) {\n  var record = Object.create(null);\n  var keyValuePairs = value.split(',');\n\n  var _iterator2 = _createForOfIteratorHelper(keyValuePairs),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var keyValue = _step2.value;\n\n      var _keyValue$split = keyValue.split(':'),\n          _keyValue$split2 = _slicedToArray(_keyValue$split, 2),\n          key = _keyValue$split2[0],\n          _value = _keyValue$split2[1];\n\n      if (_value == null) {\n        throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n      }\n\n      try {\n        // try to get a boolean\n        record[key] = getBoolean('', _value);\n      } catch (_unused) {\n        try {\n          // try to get a number\n          record[key] = getInt('', _value);\n        } catch (_unused2) {\n          // keep value as a string\n          record[key] = _value;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return record;\n}\n\nvar CaseInsensitiveMap = /*#__PURE__*/function (_Map) {\n  _inherits(CaseInsensitiveMap, _Map);\n\n  function CaseInsensitiveMap() {\n    var entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, CaseInsensitiveMap);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CaseInsensitiveMap).call(this, entries.map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          k = _ref2[0],\n          v = _ref2[1];\n\n      return [k.toLowerCase(), v];\n    })));\n  }\n\n  _createClass(CaseInsensitiveMap, [{\n    key: \"has\",\n    value: function has(k) {\n      return _get(_getPrototypeOf(CaseInsensitiveMap.prototype), \"has\", this).call(this, k.toLowerCase());\n    }\n  }, {\n    key: \"get\",\n    value: function get(k) {\n      return _get(_getPrototypeOf(CaseInsensitiveMap.prototype), \"get\", this).call(this, k.toLowerCase());\n    }\n  }, {\n    key: \"set\",\n    value: function set(k, v) {\n      return _get(_getPrototypeOf(CaseInsensitiveMap.prototype), \"set\", this).call(this, k.toLowerCase(), v);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(k) {\n      return _get(_getPrototypeOf(CaseInsensitiveMap.prototype), \"delete\", this).call(this, k.toLowerCase());\n    }\n  }]);\n\n  return CaseInsensitiveMap;\n}(_wrapNativeSuper(Map));\n\nfunction parseOptions(uri) {\n  var mongoClient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n\n  var url = new mongodb_connection_string_url_1.default(uri);\n  var hosts = url.hosts,\n      isSRV = url.isSRV;\n  var mongoOptions = Object.create(null);\n  mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n  var urlOptions = new CaseInsensitiveMap();\n\n  if (url.pathname !== '/' && url.pathname !== '') {\n    var dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n\n  if (url.username !== '') {\n    var auth = {\n      username: decodeURIComponent(url.username)\n    };\n\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n\n    urlOptions.set('auth', [auth]);\n  }\n\n  var _iterator3 = _createForOfIteratorHelper(url.searchParams.keys()),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _key = _step3.value;\n\n      var _values = _toConsumableArray(url.searchParams.getAll(_key));\n\n      if (_values.includes('')) {\n        throw new error_1.MongoAPIError('URI cannot contain options with no value');\n      }\n\n      if (!urlOptions.has(_key)) {\n        urlOptions.set(_key, _values);\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  var objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        v = _ref4[1];\n\n    return v != null;\n  })); // Validate options that can only be provided by one of uri or object\n\n  if (urlOptions.has('serverApi')) {\n    throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n  }\n\n  if (objectOptions.has('loadBalanced')) {\n    throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n  } // All option collection\n\n\n  var allOptions = new CaseInsensitiveMap();\n  var allKeys = new Set([].concat(_toConsumableArray(urlOptions.keys()), _toConsumableArray(objectOptions.keys()), _toConsumableArray(exports.DEFAULT_OPTIONS.keys())));\n\n  var _iterator4 = _createForOfIteratorHelper(allKeys),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _key2 = _step4.value;\n      var _values2 = [];\n\n      if (objectOptions.has(_key2)) {\n        _values2.push(objectOptions.get(_key2));\n      }\n\n      if (urlOptions.has(_key2)) {\n        _values2.push.apply(_values2, _toConsumableArray(urlOptions.get(_key2)));\n      }\n\n      if (exports.DEFAULT_OPTIONS.has(_key2)) {\n        _values2.push(exports.DEFAULT_OPTIONS.get(_key2));\n      }\n\n      allOptions.set(_key2, _values2);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n    allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n  }\n\n  if (allOptions.has('tls') || allOptions.has('ssl')) {\n    var tlsAndSslOpts = (allOptions.get('tls') || []).concat(allOptions.get('ssl') || []).map(getBoolean.bind(null, 'tls/ssl'));\n\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n\n  var unsupportedOptions = (0, utils_1.setDifference)(allKeys, Array.from(Object.keys(exports.OPTIONS)).map(function (s) {\n    return s.toLowerCase();\n  }));\n\n  if (unsupportedOptions.size !== 0) {\n    var optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    var isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new error_1.MongoParseError(\"\".concat(optionWord, \" \").concat(Array.from(unsupportedOptions).join(', '), \" \").concat(isOrAre, \" not supported\"));\n  } // Option parsing and setting\n\n\n  for (var _i = 0, _Object$entries = Object.entries(exports.OPTIONS); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        key = _Object$entries$_i[0],\n        descriptor = _Object$entries$_i[1];\n\n    var values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n\n  if (mongoOptions.credentials) {\n    var isGssapi = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI;\n    var isX509 = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509;\n    var isAws = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS;\n\n    if ((isGssapi || isX509) && allOptions.has('authSource') && mongoOptions.credentials.source !== '$external') {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new error_1.MongoParseError(\"\".concat(mongoOptions.credentials, \" can only have authSource set to '$external'\"));\n    }\n\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n\n    mongoOptions.credentials.validate();\n  }\n\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n\n  checkTLSOptions(mongoOptions);\n  if (options.promiseLibrary) promise_provider_1.PromiseProvider.set(options.promiseLibrary);\n  var lbError = validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n\n  if (lbError) {\n    throw lbError;\n  }\n\n  if (mongoClient && mongoOptions.autoEncryption) {\n    encrypter_1.Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  } // Potential SRV Overrides and SRV connection string validations\n\n\n  mongoOptions.userSpecifiedAuthSource = objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet = objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n    }\n\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    } // SRV turns on TLS by default, but users can override and turn it off\n\n\n    var noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    var noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    var userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') || objectOptions.has('srvMaxHosts') || urlOptions.has('srvServiceName') || objectOptions.has('srvServiceName');\n\n    if (userSpecifiedSrvOptions) {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n    }\n  }\n\n  return mongoOptions;\n}\n\nexports.parseOptions = parseOptions;\n\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      return new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n\n    if (mongoOptions.replicaSet) {\n      return new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n\n    if (mongoOptions.directConnection) {\n      return new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      return new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n}\n\nfunction setOption(mongoOptions, key, descriptor, values) {\n  var target = descriptor.target,\n      type = descriptor.type,\n      transform = descriptor.transform,\n      deprecated = descriptor.deprecated;\n  var name = target !== null && target !== void 0 ? target : key;\n\n  if (deprecated) {\n    var deprecatedMsg = typeof deprecated === 'string' ? \": \".concat(deprecated) : '';\n    (0, utils_1.emitWarning)(\"\".concat(key, \" is a deprecated option\").concat(deprecatedMsg));\n  }\n\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n\n    case 'int':\n      mongoOptions[name] = getInt(name, values[0]);\n      break;\n\n    case 'uint':\n      mongoOptions[name] = getUint(name, values[0]);\n      break;\n\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n\n      mongoOptions[name] = String(values[0]);\n      break;\n\n    case 'record':\n      if (!(0, utils_1.isRecord)(values[0])) {\n        throw new error_1.MongoParseError(\"\".concat(name, \" must be an object\"));\n      }\n\n      mongoOptions[name] = values[0];\n      break;\n\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n\n    default:\n      {\n        if (!transform) {\n          throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n        }\n\n        var transformValue = transform({\n          name: name,\n          options: mongoOptions,\n          values: values\n        });\n        mongoOptions[name] = transformValue;\n        break;\n      }\n  }\n}\n\nexports.OPTIONS = {\n  appName: {\n    target: 'metadata',\n    transform: function transform(_ref5) {\n      var options = _ref5.options,\n          _ref5$values = _slicedToArray(_ref5.values, 1),\n          value = _ref5$values[0];\n\n      return (0, utils_1.makeClientMetadata)(_objectSpread({}, options.driverInfo, {\n        appName: String(value)\n      }));\n    }\n  },\n  auth: {\n    target: 'credentials',\n    transform: function transform(_ref6) {\n      var name = _ref6.name,\n          options = _ref6.options,\n          _ref6$values = _slicedToArray(_ref6.values, 1),\n          value = _ref6$values[0];\n\n      if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n        throw new error_1.MongoParseError(\"\".concat(name, \" must be an object with 'username' and 'password' properties\"));\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform: function transform(_ref7) {\n      var options = _ref7.options,\n          _ref7$values = _slicedToArray(_ref7.values, 1),\n          value = _ref7$values[0];\n\n      var _a, _b;\n\n      var mechanisms = Object.values(defaultAuthProviders_1.AuthMechanism);\n\n      var _mechanisms$filter = mechanisms.filter(function (m) {\n        return m.match(RegExp(String.raw(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\b\", \"\\b\"], [\"\\\\b\", \"\\\\b\"])), value), 'i'));\n      }),\n          _mechanisms$filter2 = _slicedToArray(_mechanisms$filter, 1),\n          mechanism = _mechanisms$filter2[0];\n\n      if (!mechanism) {\n        throw new error_1.MongoParseError(\"authMechanism one of \".concat(mechanisms, \", got \").concat(value));\n      }\n\n      var source = (_a = options.credentials) === null || _a === void 0 ? void 0 : _a.source;\n\n      if (mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_PLAIN || mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI || mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS || mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n\n      var password = (_b = options.credentials) === null || _b === void 0 ? void 0 : _b.password;\n\n      if (mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanism: mechanism,\n        source: source,\n        password: password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform: function transform(_ref8) {\n      var options = _ref8.options,\n          _ref8$values = _slicedToArray(_ref8.values, 1),\n          value = _ref8$values[0];\n\n      if (typeof value === 'string') {\n        value = toRecord(value);\n      }\n\n      if (!(0, utils_1.isRecord)(value)) {\n        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanismProperties: value\n      });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform: function transform(_ref9) {\n      var options = _ref9.options,\n          _ref9$values = _slicedToArray(_ref9.values, 1),\n          value = _ref9$values[0];\n\n      var source = String(value);\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source: source\n      });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform: function transform(_ref10) {\n      var _ref10$values = _slicedToArray(_ref10.values, 1),\n          version = _ref10$values[0];\n\n      var serverApiToValidate = typeof version === 'string' ? {\n        version: version\n      } : version;\n      var versionToValidate = serverApiToValidate && serverApiToValidate.version;\n\n      if (!versionToValidate) {\n        throw new error_1.MongoParseError(\"Invalid `serverApi` property; must specify a version from the following enum: [\\\"\".concat(Object.values(mongo_client_1.ServerApiVersion).join('\", \"'), \"\\\"]\"));\n      }\n\n      if (!Object.values(mongo_client_1.ServerApiVersion).some(function (v) {\n        return v === versionToValidate;\n      })) {\n        throw new error_1.MongoParseError(\"Invalid server API version=\".concat(versionToValidate, \"; must be in the following enum: [\\\"\").concat(Object.values(mongo_client_1.ServerApiVersion).join('\", \"'), \"\\\"]\"));\n      }\n\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform: function transform(_ref11) {\n      var values = _ref11.values;\n      var compressionList = new Set();\n\n      var _iterator5 = _createForOfIteratorHelper(values),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var compVal = _step5.value;\n          var compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n\n          if (!Array.isArray(compValArray)) {\n            throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n          }\n\n          var _iterator6 = _createForOfIteratorHelper(compValArray),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var c = _step6.value;\n\n              if (Object.keys(compression_1.Compressor).includes(String(c))) {\n                compressionList.add(String(c));\n              } else {\n                throw new error_1.MongoInvalidArgumentError(\"\".concat(c, \" is not a valid compression mechanism. Must be one of: \").concat(Object.keys(compression_1.Compressor), \".\"));\n              }\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return _toConsumableArray(compressionList);\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: (0, utils_1.makeClientMetadata)(),\n    transform: function transform(_ref12) {\n      var options = _ref12.options,\n          _ref12$values = _slicedToArray(_ref12.values, 1),\n          value = _ref12$values[0];\n\n      var _a, _b;\n\n      if (!(0, utils_1.isRecord)(value)) throw new error_1.MongoParseError('DriverInfo must be an object');\n      return (0, utils_1.makeClientMetadata)({\n        driverInfo: value,\n        appName: (_b = (_a = options.metadata) === null || _a === void 0 ? void 0 : _a.application) === null || _b === void 0 ? void 0 : _b.name\n      });\n    }\n  },\n  family: {\n    transform: function transform(_ref13) {\n      var name = _ref13.name,\n          _ref13$values = _slicedToArray(_ref13.values, 1),\n          value = _ref13$values[0];\n\n      var transformValue = getInt(name, value);\n\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n\n      throw new error_1.MongoParseError(\"Option 'family' must be 4 or 6 got \".concat(transformValue, \".\"));\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform: function transform(_ref14) {\n      var name = _ref14.name,\n          options = _ref14.options,\n          _ref14$values = _slicedToArray(_ref14.values, 1),\n          value = _ref14$values[0];\n\n      var wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: _objectSpread({}, options.writeConcern, {\n          fsync: getBoolean(name, value)\n        })\n      });\n      if (!wc) throw new error_1.MongoParseError(\"Unable to make a writeConcern from fsync=\".concat(value));\n      return wc;\n    }\n  },\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform: function transform(_ref15) {\n      var name = _ref15.name,\n          options = _ref15.options,\n          _ref15$values = _slicedToArray(_ref15.values, 1),\n          value = _ref15$values[0];\n\n      var wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: _objectSpread({}, options.writeConcern, {\n          journal: getBoolean(name, value)\n        })\n      });\n      if (!wc) throw new error_1.MongoParseError(\"Unable to make a writeConcern from journal=\".concat(value));\n      return wc;\n    }\n  },\n  journal: {\n    target: 'writeConcern',\n    transform: function transform(_ref16) {\n      var name = _ref16.name,\n          options = _ref16.options,\n          _ref16$values = _slicedToArray(_ref16.values, 1),\n          value = _ref16$values[0];\n\n      var wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: _objectSpread({}, options.writeConcern, {\n          journal: getBoolean(name, value)\n        })\n      });\n      if (!wc) throw new error_1.MongoParseError(\"Unable to make a writeConcern from journal=\".concat(value));\n      return wc;\n    }\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  logger: {\n    default: new logger_1.Logger('MongoClient'),\n    transform: function transform(_ref17) {\n      var _ref17$values = _slicedToArray(_ref17.values, 1),\n          value = _ref17$values[0];\n\n      if (value instanceof logger_1.Logger) {\n        return value;\n      }\n\n      (0, utils_1.emitWarning)('Alternative loggers might not be supported'); // TODO: make Logger an interface that others can implement, make usage consistent in driver\n      // DRIVERS-1204\n    }\n  },\n  loggerLevel: {\n    target: 'logger',\n    transform: function transform(_ref18) {\n      var _ref18$values = _slicedToArray(_ref18.values, 1),\n          value = _ref18$values[0];\n\n      return new logger_1.Logger('MongoClient', {\n        loggerLevel: value\n      });\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform: function transform(_ref19) {\n      var name = _ref19.name,\n          options = _ref19.options,\n          _ref19$values = _slicedToArray(_ref19.values, 1),\n          value = _ref19$values[0];\n\n      var maxStalenessSeconds = getUint(name, value);\n\n      if (options.readPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: _objectSpread({}, options.readPreference, {\n            maxStalenessSeconds: maxStalenessSeconds\n          })\n        });\n      } else {\n        return new read_preference_1.ReadPreference('secondary', undefined, {\n          maxStalenessSeconds: maxStalenessSeconds\n        });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform: function transform(_ref20) {\n      var _ref20$values = _slicedToArray(_ref20.values, 1),\n          value = _ref20$values[0],\n          options = _ref20.options;\n\n      return _objectSpread({}, options.driverInfo, {\n        name: String(value)\n      });\n    }\n  },\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: utils_1.DEFAULT_PK_FACTORY,\n    transform: function transform(_ref21) {\n      var _ref21$values = _slicedToArray(_ref21.values, 1),\n          value = _ref21$values[0];\n\n      if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n        return value;\n      }\n\n      throw new error_1.MongoParseError(\"Option pkFactory must be an object with a createPk function, got \".concat(value));\n    }\n  },\n  promiseLibrary: {\n    deprecated: true,\n    type: 'any'\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform: function transform(_ref22) {\n      var _ref22$values = _slicedToArray(_ref22.values, 1),\n          value = _ref22$values[0],\n          options = _ref22.options;\n\n      if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n        return read_concern_1.ReadConcern.fromOptions(_objectSpread({}, options.readConcern, value));\n      }\n\n      throw new error_1.MongoParseError(\"ReadConcern must be an object, got \".concat(JSON.stringify(value)));\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform: function transform(_ref23) {\n      var _ref23$values = _slicedToArray(_ref23.values, 1),\n          level = _ref23$values[0],\n          options = _ref23.options;\n\n      return read_concern_1.ReadConcern.fromOptions(_objectSpread({}, options.readConcern, {\n        level: level\n      }));\n    }\n  },\n  readPreference: {\n    default: read_preference_1.ReadPreference.primary,\n    transform: function transform(_ref24) {\n      var _ref24$values = _slicedToArray(_ref24.values, 1),\n          value = _ref24$values[0],\n          options = _ref24.options;\n\n      var _a, _b, _c;\n\n      if (value instanceof read_preference_1.ReadPreference) {\n        return read_preference_1.ReadPreference.fromOptions(_objectSpread({\n          readPreference: _objectSpread({}, options.readPreference, value)\n        }, value));\n      }\n\n      if ((0, utils_1.isRecord)(value, ['mode'])) {\n        var rp = read_preference_1.ReadPreference.fromOptions(_objectSpread({\n          readPreference: _objectSpread({}, options.readPreference, value)\n        }, value));\n        if (rp) return rp;else throw new error_1.MongoParseError(\"Cannot make read preference from \".concat(JSON.stringify(value)));\n      }\n\n      if (typeof value === 'string') {\n        var rpOpts = {\n          hedge: (_a = options.readPreference) === null || _a === void 0 ? void 0 : _a.hedge,\n          maxStalenessSeconds: (_b = options.readPreference) === null || _b === void 0 ? void 0 : _b.maxStalenessSeconds\n        };\n        return new read_preference_1.ReadPreference(value, (_c = options.readPreference) === null || _c === void 0 ? void 0 : _c.tags, rpOpts);\n      }\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform: function transform(_ref25) {\n      var values = _ref25.values,\n          options = _ref25.options;\n      var readPreferenceTags = [];\n\n      var _iterator7 = _createForOfIteratorHelper(values),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var tag = _step7.value;\n          var readPreferenceTag = Object.create(null);\n\n          if (typeof tag === 'string') {\n            for (var _i2 = 0, _Object$entries2 = Object.entries(toRecord(tag)); _i2 < _Object$entries2.length; _i2++) {\n              var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n                  k = _Object$entries2$_i[0],\n                  v = _Object$entries2$_i[1];\n\n              readPreferenceTag[k] = v;\n            }\n          }\n\n          if ((0, utils_1.isRecord)(tag)) {\n            for (var _i3 = 0, _Object$entries3 = Object.entries(tag); _i3 < _Object$entries3.length; _i3++) {\n              var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i3], 2),\n                  _k = _Object$entries3$_i[0],\n                  _v = _Object$entries3$_i[1];\n\n              readPreferenceTag[_k] = _v;\n            }\n          }\n\n          readPreferenceTags.push(readPreferenceTag);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      return read_preference_1.ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags: readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n    transform: function transform(_ref26) {\n      var _ref26$values = _slicedToArray(_ref26.values, 1),\n          value = _ref26$values[0];\n\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslCRL: {\n    target: 'crl',\n    transform: function transform(_ref27) {\n      var _ref27$values = _slicedToArray(_ref27.values, 1),\n          value = _ref27$values[0];\n\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslCert: {\n    target: 'cert',\n    transform: function transform(_ref28) {\n      var _ref28$values = _slicedToArray(_ref28.values, 1),\n          value = _ref28$values[0];\n\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslKey: {\n    target: 'key',\n    transform: function transform(_ref29) {\n      var _ref29$values = _slicedToArray(_ref29.values, 1),\n          value = _ref29$values[0];\n\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform: function transform(_ref30) {\n      var name = _ref30.name,\n          _ref30$values = _slicedToArray(_ref30.values, 1),\n          value = _ref30$values[0];\n\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform: function transform(_ref31) {\n      var name = _ref31.name,\n          _ref31$values = _slicedToArray(_ref31.values, 1),\n          value = _ref31$values[0];\n\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? function () {\n        return undefined;\n      } : undefined;\n    }\n  },\n  tlsCAFile: {\n    target: 'ca',\n    transform: function transform(_ref32) {\n      var _ref32$values = _slicedToArray(_ref32.values, 1),\n          value = _ref32$values[0];\n\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n    transform: function transform(_ref33) {\n      var _ref33$values = _slicedToArray(_ref33.values, 1),\n          value = _ref33$values[0];\n\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n    transform: function transform(_ref34) {\n      var _ref34$values = _slicedToArray(_ref34.values, 1),\n          value = _ref34$values[0];\n\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform: function transform(_ref35) {\n      var name = _ref35.name,\n          options = _ref35.options,\n          _ref35$values = _slicedToArray(_ref35.values, 1),\n          value = _ref35$values[0];\n\n      var tlsInsecure = getBoolean(name, value);\n\n      if (tlsInsecure) {\n        options.checkServerIdentity = function () {\n          return undefined;\n        };\n\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames ? function () {\n          return undefined;\n        } : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform: function transform(_ref36) {\n      var _ref36$values = _slicedToArray(_ref36.values, 1),\n          value = _ref36$values[0],\n          options = _ref36.options;\n\n      return write_concern_1.WriteConcern.fromOptions({\n        writeConcern: _objectSpread({}, options.writeConcern, {\n          w: value\n        })\n      });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform: function transform(_ref37) {\n      var _ref37$values = _slicedToArray(_ref37.values, 1),\n          value = _ref37$values[0],\n          options = _ref37.options;\n\n      if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: _objectSpread({}, options.writeConcern, value)\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: _objectSpread({}, options.writeConcern, {\n            w: value\n          })\n        });\n      }\n\n      throw new error_1.MongoParseError(\"Invalid WriteConcern cannot parse: \".concat(JSON.stringify(value)));\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform: function transform(_ref38) {\n      var _ref38$values = _slicedToArray(_ref38.values, 1),\n          value = _ref38$values[0],\n          options = _ref38.options;\n\n      var wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: _objectSpread({}, options.writeConcern, {\n          wtimeout: getUint('wtimeout', value)\n        })\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(\"Cannot make WriteConcern from wtimeout\");\n    }\n  },\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform: function transform(_ref39) {\n      var _ref39$values = _slicedToArray(_ref39.values, 1),\n          value = _ref39$values[0],\n          options = _ref39.options;\n\n      var wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: _objectSpread({}, options.writeConcern, {\n          wtimeoutMS: getUint('wtimeoutMS', value)\n        })\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(\"Cannot make WriteConcern from wtimeout\");\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: {\n    type: 'any'\n  },\n  srvPoller: {\n    type: 'any'\n  },\n  // Accepted NodeJS Options\n  minDHSize: {\n    type: 'any'\n  },\n  pskCallback: {\n    type: 'any'\n  },\n  secureContext: {\n    type: 'any'\n  },\n  enableTrace: {\n    type: 'any'\n  },\n  requestCert: {\n    type: 'any'\n  },\n  rejectUnauthorized: {\n    type: 'any'\n  },\n  checkServerIdentity: {\n    type: 'any'\n  },\n  ALPNProtocols: {\n    type: 'any'\n  },\n  SNICallback: {\n    type: 'any'\n  },\n  session: {\n    type: 'any'\n  },\n  requestOCSP: {\n    type: 'any'\n  },\n  localAddress: {\n    type: 'any'\n  },\n  localPort: {\n    type: 'any'\n  },\n  hints: {\n    type: 'any'\n  },\n  lookup: {\n    type: 'any'\n  },\n  ca: {\n    type: 'any'\n  },\n  cert: {\n    type: 'any'\n  },\n  ciphers: {\n    type: 'any'\n  },\n  crl: {\n    type: 'any'\n  },\n  ecdhCurve: {\n    type: 'any'\n  },\n  key: {\n    type: 'any'\n  },\n  passphrase: {\n    type: 'any'\n  },\n  pfx: {\n    type: 'any'\n  },\n  secureProtocol: {\n    type: 'any'\n  },\n  index: {\n    type: 'any'\n  },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: {\n    type: 'boolean'\n  },\n  useUnifiedTopology: {\n    type: 'boolean'\n  }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(function (_ref40) {\n  var _ref41 = _slicedToArray(_ref40, 2),\n      descriptor = _ref41[1];\n\n  return descriptor.default != null;\n}).map(function (_ref42) {\n  var _ref43 = _slicedToArray(_ref42, 2),\n      k = _ref43[0],\n      d = _ref43[1];\n\n  return [k, d.default];\n}));","map":null,"metadata":{},"sourceType":"script"}