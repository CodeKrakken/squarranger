{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar _taggedTemplateLiteral = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommaAndColonSeparatedRecord = exports.redactConnectionString = void 0;\n\nvar whatwg_url_1 = require(\"whatwg-url\");\n\nvar redact_1 = require(\"./redact\");\n\nObject.defineProperty(exports, \"redactConnectionString\", {\n  enumerable: true,\n  get: function get() {\n    return redact_1.redactConnectionString;\n  }\n});\nvar DUMMY_HOSTNAME = '__this_is_a_placeholder__';\nvar HOSTS_REGEX = new RegExp(String.raw(_templateObject || (_templateObject = _taggedTemplateLiteral([\"^(?<protocol>mongodb(?:+srv|))://(?:(?<username>[^:]*)(?::(?<password>[^@]*))?@)?(?<hosts>(?!:)[^/?@]+)(?<rest>.*)\"], [\"^(?<protocol>mongodb(?:\\\\+srv|)):\\\\/\\\\/(?:(?<username>[^:]*)(?::(?<password>[^@]*))?@)?(?<hosts>(?!:)[^\\\\/?@]+)(?<rest>.*)\"]))));\n\nvar CaseInsensitiveMap = /*#__PURE__*/function (_Map) {\n  _inherits(CaseInsensitiveMap, _Map);\n\n  function CaseInsensitiveMap() {\n    _classCallCheck(this, CaseInsensitiveMap);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CaseInsensitiveMap).apply(this, arguments));\n  }\n\n  _createClass(CaseInsensitiveMap, [{\n    key: \"delete\",\n    value: function _delete(name) {\n      return _get(_getPrototypeOf(CaseInsensitiveMap.prototype), \"delete\", this).call(this, this._normalizeKey(name));\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      return _get(_getPrototypeOf(CaseInsensitiveMap.prototype), \"get\", this).call(this, this._normalizeKey(name));\n    }\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      return _get(_getPrototypeOf(CaseInsensitiveMap.prototype), \"has\", this).call(this, this._normalizeKey(name));\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      return _get(_getPrototypeOf(CaseInsensitiveMap.prototype), \"set\", this).call(this, this._normalizeKey(name), value);\n    }\n  }, {\n    key: \"_normalizeKey\",\n    value: function _normalizeKey(name) {\n      name = \"\".concat(name);\n\n      var _iterator = _createForOfIteratorHelper(this.keys()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var key = _step.value;\n\n          if (key.toLowerCase() === name.toLowerCase()) {\n            name = key;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return name;\n    }\n  }]);\n\n  return CaseInsensitiveMap;\n}(_wrapNativeSuper(Map));\n\nvar caseInsenstiveURLSearchParams = function caseInsenstiveURLSearchParams(Ctor) {\n  return /*#__PURE__*/function (_Ctor) {\n    _inherits(CaseInsenstiveURLSearchParams, _Ctor);\n\n    function CaseInsenstiveURLSearchParams() {\n      _classCallCheck(this, CaseInsenstiveURLSearchParams);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(CaseInsenstiveURLSearchParams).apply(this, arguments));\n    }\n\n    _createClass(CaseInsenstiveURLSearchParams, [{\n      key: \"append\",\n      value: function append(name, value) {\n        return _get(_getPrototypeOf(CaseInsenstiveURLSearchParams.prototype), \"append\", this).call(this, this._normalizeKey(name), value);\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(name) {\n        return _get(_getPrototypeOf(CaseInsenstiveURLSearchParams.prototype), \"delete\", this).call(this, this._normalizeKey(name));\n      }\n    }, {\n      key: \"get\",\n      value: function get(name) {\n        return _get(_getPrototypeOf(CaseInsenstiveURLSearchParams.prototype), \"get\", this).call(this, this._normalizeKey(name));\n      }\n    }, {\n      key: \"getAll\",\n      value: function getAll(name) {\n        return _get(_getPrototypeOf(CaseInsenstiveURLSearchParams.prototype), \"getAll\", this).call(this, this._normalizeKey(name));\n      }\n    }, {\n      key: \"has\",\n      value: function has(name) {\n        return _get(_getPrototypeOf(CaseInsenstiveURLSearchParams.prototype), \"has\", this).call(this, this._normalizeKey(name));\n      }\n    }, {\n      key: \"set\",\n      value: function set(name, value) {\n        return _get(_getPrototypeOf(CaseInsenstiveURLSearchParams.prototype), \"set\", this).call(this, this._normalizeKey(name), value);\n      }\n    }, {\n      key: \"_normalizeKey\",\n      value: function _normalizeKey(name) {\n        return CaseInsensitiveMap.prototype._normalizeKey.call(this, name);\n      }\n    }]);\n\n    return CaseInsenstiveURLSearchParams;\n  }(Ctor);\n};\n\nvar URLWithoutHost = /*#__PURE__*/function (_whatwg_url_1$URL) {\n  _inherits(URLWithoutHost, _whatwg_url_1$URL);\n\n  function URLWithoutHost() {\n    _classCallCheck(this, URLWithoutHost);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(URLWithoutHost).apply(this, arguments));\n  }\n\n  return URLWithoutHost;\n}(whatwg_url_1.URL);\n\nvar MongoParseError = /*#__PURE__*/function (_Error) {\n  _inherits(MongoParseError, _Error);\n\n  function MongoParseError() {\n    _classCallCheck(this, MongoParseError);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MongoParseError).apply(this, arguments));\n  }\n\n  _createClass(MongoParseError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoParseError';\n    }\n  }]);\n\n  return MongoParseError;\n}(_wrapNativeSuper(Error));\n\nvar ConnectionString = /*#__PURE__*/function (_URLWithoutHost) {\n  _inherits(ConnectionString, _URLWithoutHost);\n\n  function ConnectionString(uri) {\n    var _this;\n\n    _classCallCheck(this, ConnectionString);\n\n    var _a;\n\n    var match = uri.match(HOSTS_REGEX);\n\n    if (!match) {\n      throw new MongoParseError(\"Invalid connection string \\\"\".concat(uri, \"\\\"\"));\n    }\n\n    var _ref = (_a = match.groups) !== null && _a !== void 0 ? _a : {},\n        protocol = _ref.protocol,\n        username = _ref.username,\n        password = _ref.password,\n        hosts = _ref.hosts,\n        rest = _ref.rest;\n\n    if (!protocol || !hosts) {\n      throw new MongoParseError(\"Protocol and host list are required in \\\"\".concat(uri, \"\\\"\"));\n    }\n\n    try {\n      decodeURIComponent(username !== null && username !== void 0 ? username : '');\n      decodeURIComponent(password !== null && password !== void 0 ? password : '');\n    } catch (err) {\n      throw new MongoParseError(err.message);\n    }\n\n    var illegalCharacters = new RegExp(String.raw(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"[:/?#[]@]\"], [\"[:/?#\\\\[\\\\]@]\"]))), 'gi');\n\n    if (username === null || username === void 0 ? void 0 : username.match(illegalCharacters)) {\n      throw new MongoParseError(\"Username contains unescaped characters \".concat(username));\n    }\n\n    if (!username || !password) {\n      var uriWithoutProtocol = uri.replace(\"\".concat(protocol, \"://\"), '');\n\n      if (uriWithoutProtocol.startsWith('@') || uriWithoutProtocol.startsWith(':')) {\n        throw new MongoParseError('URI contained empty userinfo section');\n      }\n    }\n\n    if (password === null || password === void 0 ? void 0 : password.match(illegalCharacters)) {\n      throw new MongoParseError('Password contains unescaped characters');\n    }\n\n    var authString = '';\n    if (typeof username === 'string') authString += username;\n    if (typeof password === 'string') authString += \":\".concat(password);\n    if (authString) authString += '@';\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionString).call(this, \"\".concat(protocol.toLowerCase(), \"://\").concat(authString).concat(DUMMY_HOSTNAME).concat(rest)));\n    _this._hosts = hosts.split(',');\n\n    if (_this.isSRV && _this.hosts.length !== 1) {\n      throw new MongoParseError('mongodb+srv URI cannot have multiple service names');\n    }\n\n    if (_this.isSRV && _this.hosts.some(function (host) {\n      return host.includes(':');\n    })) {\n      throw new MongoParseError('mongodb+srv URI cannot have port number');\n    }\n\n    if (!_this.pathname) {\n      _this.pathname = '/';\n    }\n\n    Object.setPrototypeOf(_this.searchParams, caseInsenstiveURLSearchParams(_this.searchParams.constructor).prototype);\n    return _this;\n  }\n\n  _createClass(ConnectionString, [{\n    key: \"toString\",\n    value: function toString() {\n      return _get(_getPrototypeOf(ConnectionString.prototype), \"toString\", this).call(this).replace(DUMMY_HOSTNAME, this.hosts.join(','));\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new ConnectionString(this.toString());\n    }\n  }, {\n    key: \"redact\",\n    value: function redact(options) {\n      return (0, redact_1.redactValidConnectionString)(this, options);\n    }\n  }, {\n    key: Symbol.for('nodejs.util.inspect.custom'),\n    value: function value() {\n      var href = this.href,\n          origin = this.origin,\n          protocol = this.protocol,\n          username = this.username,\n          password = this.password,\n          hosts = this.hosts,\n          pathname = this.pathname,\n          search = this.search,\n          searchParams = this.searchParams,\n          hash = this.hash;\n      return {\n        href: href,\n        origin: origin,\n        protocol: protocol,\n        username: username,\n        password: password,\n        hosts: hosts,\n        pathname: pathname,\n        search: search,\n        searchParams: searchParams,\n        hash: hash\n      };\n    }\n  }, {\n    key: \"host\",\n    get: function get() {\n      return DUMMY_HOSTNAME;\n    },\n    set: function set(_ignored) {\n      throw new Error('No single host for connection string');\n    }\n  }, {\n    key: \"hostname\",\n    get: function get() {\n      return DUMMY_HOSTNAME;\n    },\n    set: function set(_ignored) {\n      throw new Error('No single host for connection string');\n    }\n  }, {\n    key: \"port\",\n    get: function get() {\n      return '';\n    },\n    set: function set(_ignored) {\n      throw new Error('No single host for connection string');\n    }\n  }, {\n    key: \"href\",\n    get: function get() {\n      return this.toString();\n    },\n    set: function set(_ignored) {\n      throw new Error('Cannot set href for connection strings');\n    }\n  }, {\n    key: \"isSRV\",\n    get: function get() {\n      return this.protocol.includes('srv');\n    }\n  }, {\n    key: \"hosts\",\n    get: function get() {\n      return this._hosts;\n    },\n    set: function set(list) {\n      this._hosts = list;\n    }\n  }]);\n\n  return ConnectionString;\n}(URLWithoutHost);\n\nexports.default = ConnectionString;\n\nvar CommaAndColonSeparatedRecord = /*#__PURE__*/function (_CaseInsensitiveMap) {\n  _inherits(CommaAndColonSeparatedRecord, _CaseInsensitiveMap);\n\n  function CommaAndColonSeparatedRecord(from) {\n    var _this2;\n\n    _classCallCheck(this, CommaAndColonSeparatedRecord);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(CommaAndColonSeparatedRecord).call(this));\n\n    var _iterator2 = _createForOfIteratorHelper((from !== null && from !== void 0 ? from : '').split(',')),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var entry = _step2.value;\n        if (!entry) continue;\n        var colonIndex = entry.indexOf(':');\n\n        if (colonIndex === -1) {\n          _this2.set(entry, '');\n        } else {\n          _this2.set(entry.slice(0, colonIndex), entry.slice(colonIndex + 1));\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    return _this2;\n  }\n\n  _createClass(CommaAndColonSeparatedRecord, [{\n    key: \"toString\",\n    value: function toString() {\n      return _toConsumableArray(this).map(function (entry) {\n        return entry.join(':');\n      }).join(',');\n    }\n  }]);\n\n  return CommaAndColonSeparatedRecord;\n}(CaseInsensitiveMap);\n\nexports.CommaAndColonSeparatedRecord = CommaAndColonSeparatedRecord;","map":null,"metadata":{},"sourceType":"script"}