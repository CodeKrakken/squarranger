{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _objectSpread = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CMAP_EVENTS = exports.ConnectionPool = void 0;\n\nvar Denque = require(\"denque\");\n\nvar connection_1 = require(\"./connection\");\n\nvar logger_1 = require(\"../logger\");\n\nvar metrics_1 = require(\"./metrics\");\n\nvar connect_1 = require(\"./connect\");\n\nvar utils_1 = require(\"../utils\");\n\nvar error_1 = require(\"../error\");\n\nvar errors_1 = require(\"./errors\");\n\nvar connection_pool_events_1 = require(\"./connection_pool_events\");\n\nvar mongo_types_1 = require(\"../mongo_types\");\n/** @internal */\n\n\nvar kLogger = Symbol('logger');\n/** @internal */\n\nvar kConnections = Symbol('connections');\n/** @internal */\n\nvar kPermits = Symbol('permits');\n/** @internal */\n\nvar kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\n\nvar kGeneration = Symbol('generation');\n/** @internal */\n\nvar kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\n\nvar kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\n\nvar kCancellationToken = Symbol('cancellationToken');\n/** @internal */\n\nvar kWaitQueue = Symbol('waitQueue');\n/** @internal */\n\nvar kCancelled = Symbol('cancelled');\n/** @internal */\n\nvar kMetrics = Symbol('metrics');\n/** @internal */\n\nvar kCheckedOut = Symbol('checkedOut');\n/** @internal */\n\nvar kProcessingWaitQueue = Symbol('processingWaitQueue');\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\n\nvar ConnectionPool = /*#__PURE__*/function (_mongo_types_1$TypedE) {\n  _inherits(ConnectionPool, _mongo_types_1$TypedE);\n\n  /** @internal */\n  function ConnectionPool(options) {\n    var _this;\n\n    _classCallCheck(this, ConnectionPool);\n\n    var _a, _b, _c, _d;\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionPool).call(this));\n    _this.closed = false;\n    _this.options = Object.freeze(_objectSpread({}, options, {\n      connectionType: connection_1.Connection,\n      maxPoolSize: (_a = options.maxPoolSize) !== null && _a !== void 0 ? _a : 100,\n      minPoolSize: (_b = options.minPoolSize) !== null && _b !== void 0 ? _b : 0,\n      maxIdleTimeMS: (_c = options.maxIdleTimeMS) !== null && _c !== void 0 ? _c : 0,\n      waitQueueTimeoutMS: (_d = options.waitQueueTimeoutMS) !== null && _d !== void 0 ? _d : 0,\n      autoEncrypter: options.autoEncrypter,\n      metadata: options.metadata\n    }));\n\n    if (_this.options.minPoolSize > _this.options.maxPoolSize) {\n      throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n    }\n\n    _this[kLogger] = new logger_1.Logger('ConnectionPool');\n    _this[kConnections] = new Denque();\n    _this[kPermits] = _this.options.maxPoolSize;\n    _this[kMinPoolSizeTimer] = undefined;\n    _this[kGeneration] = 0;\n    _this[kServiceGenerations] = new Map();\n    _this[kConnectionCounter] = (0, utils_1.makeCounter)(1);\n    _this[kCancellationToken] = new mongo_types_1.CancellationToken();\n\n    _this[kCancellationToken].setMaxListeners(Infinity);\n\n    _this[kWaitQueue] = new Denque();\n    _this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n    _this[kCheckedOut] = 0;\n    _this[kProcessingWaitQueue] = false;\n    process.nextTick(function () {\n      _this.emit(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(_assertThisInitialized(_assertThisInitialized(_this))));\n\n      ensureMinPoolSize(_assertThisInitialized(_assertThisInitialized(_this)));\n    });\n    return _this;\n  }\n  /** The address of the endpoint the pool is connected to */\n\n\n  _createClass(ConnectionPool, [{\n    key: \"waitQueueErrorMetrics\",\n\n    /**\n     * Get the metrics information for the pool when a wait queue timeout occurs.\n     */\n    value: function waitQueueErrorMetrics() {\n      return this[kMetrics].info(this.options.maxPoolSize);\n    }\n    /**\n     * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n     * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n     * explicitly destroyed by the new owner.\n     */\n\n  }, {\n    key: \"checkOut\",\n    value: function checkOut(callback) {\n      var _this2 = this;\n\n      this.emit(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n\n      if (this.closed) {\n        this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'poolClosed'));\n        callback(new errors_1.PoolClosedError(this));\n        return;\n      }\n\n      var waitQueueMember = {\n        callback: callback\n      };\n      var waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n\n      if (waitQueueTimeoutMS) {\n        waitQueueMember.timer = setTimeout(function () {\n          waitQueueMember[kCancelled] = true;\n          waitQueueMember.timer = undefined;\n\n          _this2.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(_this2, 'timeout'));\n\n          waitQueueMember.callback(new errors_1.WaitQueueTimeoutError(_this2.loadBalanced ? _this2.waitQueueErrorMetrics() : 'Timed out while checking out a connection from connection pool', _this2.address));\n        }, waitQueueTimeoutMS);\n      }\n\n      this[kCheckedOut] = this[kCheckedOut] + 1;\n      this[kWaitQueue].push(waitQueueMember);\n      process.nextTick(processWaitQueue, this);\n    }\n    /**\n     * Check a connection into the pool.\n     *\n     * @param connection - The connection to check in\n     */\n\n  }, {\n    key: \"checkIn\",\n    value: function checkIn(connection) {\n      var poolClosed = this.closed;\n      var stale = connectionIsStale(this, connection);\n      var willDestroy = !!(poolClosed || stale || connection.closed);\n\n      if (!willDestroy) {\n        connection.markAvailable();\n        this[kConnections].unshift(connection);\n      }\n\n      this[kCheckedOut] = this[kCheckedOut] - 1;\n      this.emit(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n\n      if (willDestroy) {\n        var reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n        destroyConnection(this, connection, reason);\n      }\n\n      process.nextTick(processWaitQueue, this);\n    }\n    /**\n     * Clear the pool\n     *\n     * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n     * previous generation will eventually be pruned during subsequent checkouts.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear(serviceId) {\n      if (this.loadBalanced && serviceId) {\n        var sid = serviceId.toHexString();\n        var generation = this.serviceGenerations.get(sid); // Only need to worry if the generation exists, since it should\n        // always be there but typescript needs the check.\n\n        if (generation == null) {\n          // TODO(NODE-3483)\n          throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n        } else {\n          // Increment the generation for the service id.\n          this.serviceGenerations.set(sid, generation + 1);\n        }\n      } else {\n        this[kGeneration] += 1;\n      }\n\n      this.emit('connectionPoolCleared', new connection_pool_events_1.ConnectionPoolClearedEvent(this, serviceId));\n    }\n  }, {\n    key: \"close\",\n    value: function close(_options, _cb) {\n      var _this3 = this;\n\n      var options = _options;\n      var callback = _cb !== null && _cb !== void 0 ? _cb : _options;\n\n      if (typeof options === 'function') {\n        options = {};\n      }\n\n      options = Object.assign({\n        force: false\n      }, options);\n\n      if (this.closed) {\n        return callback();\n      } // immediately cancel any in-flight connections\n\n\n      this[kCancellationToken].emit('cancel'); // drain the wait queue\n\n      while (this.waitQueueSize) {\n        var waitQueueMember = this[kWaitQueue].pop();\n\n        if (waitQueueMember) {\n          if (waitQueueMember.timer) {\n            clearTimeout(waitQueueMember.timer);\n          }\n\n          if (!waitQueueMember[kCancelled]) {\n            // TODO(NODE-3483): Replace with MongoConnectionPoolClosedError\n            waitQueueMember.callback(new error_1.MongoRuntimeError('Connection pool closed'));\n          }\n        }\n      } // clear the min pool size timer\n\n\n      var minPoolSizeTimer = this[kMinPoolSizeTimer];\n\n      if (minPoolSizeTimer) {\n        clearTimeout(minPoolSizeTimer);\n      } // end the connection counter\n\n\n      if (typeof this[kConnectionCounter].return === 'function') {\n        this[kConnectionCounter].return(undefined);\n      } // mark the pool as closed immediately\n\n\n      this.closed = true;\n      (0, utils_1.eachAsync)(this[kConnections].toArray(), function (conn, cb) {\n        _this3.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(_this3, conn, 'poolClosed'));\n\n        conn.destroy(options, cb);\n      }, function (err) {\n        _this3[kConnections].clear();\n\n        _this3.emit(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(_this3));\n\n        callback(err);\n      });\n    }\n    /**\n     * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n     * has completed by calling back.\n     *\n     * NOTE: please note the required signature of `fn`\n     *\n     * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n     *   In these cases we pass the connection in to this method to ensure it is used and a new\n     *   connection is not checked out.\n     *\n     * @param conn - A pinned connection for use in load balancing mode.\n     * @param fn - A function which operates on a managed connection\n     * @param callback - The original callback\n     */\n\n  }, {\n    key: \"withConnection\",\n    value: function withConnection(conn, fn, callback) {\n      var _this4 = this;\n\n      if (conn) {\n        // use the provided connection, and do _not_ check it in after execution\n        fn(undefined, conn, function (fnErr, result) {\n          if (typeof callback === 'function') {\n            if (fnErr) {\n              callback(fnErr);\n            } else {\n              callback(undefined, result);\n            }\n          }\n        });\n        return;\n      }\n\n      this.checkOut(function (err, conn) {\n        // don't callback with `err` here, we might want to act upon it inside `fn`\n        fn(err, conn, function (fnErr, result) {\n          if (typeof callback === 'function') {\n            if (fnErr) {\n              callback(fnErr);\n            } else {\n              callback(undefined, result);\n            }\n          }\n\n          if (conn) {\n            _this4.checkIn(conn);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this.options.hostAddress.toString();\n    }\n    /** An integer representing the SDAM generation of the pool */\n\n  }, {\n    key: \"generation\",\n    get: function get() {\n      return this[kGeneration];\n    }\n    /** An integer expressing how many total connections (active + in use) the pool currently has */\n\n  }, {\n    key: \"totalConnectionCount\",\n    get: function get() {\n      return this[kConnections].length + (this.options.maxPoolSize - this[kPermits]);\n    }\n    /** An integer expressing how many connections are currently available in the pool. */\n\n  }, {\n    key: \"availableConnectionCount\",\n    get: function get() {\n      return this[kConnections].length;\n    }\n  }, {\n    key: \"waitQueueSize\",\n    get: function get() {\n      return this[kWaitQueue].length;\n    }\n  }, {\n    key: \"loadBalanced\",\n    get: function get() {\n      return this.options.loadBalanced;\n    }\n  }, {\n    key: \"serviceGenerations\",\n    get: function get() {\n      return this[kServiceGenerations];\n    }\n  }, {\n    key: \"currentCheckedOutCount\",\n    get: function get() {\n      return this[kCheckedOut];\n    }\n  }]);\n\n  return ConnectionPool;\n}(mongo_types_1.TypedEventEmitter);\n\nexports.ConnectionPool = ConnectionPool;\n/**\n * Emitted when the connection pool is created.\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_CREATED = 'connectionPoolCreated';\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_CLOSED = 'connectionPoolClosed';\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_CLEARED = 'connectionPoolCleared';\n/**\n * Emitted when a connection is created.\n * @event\n */\n\nConnectionPool.CONNECTION_CREATED = 'connectionCreated';\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\n\nConnectionPool.CONNECTION_READY = 'connectionReady';\n/**\n * Emitted when a connection is closed\n * @event\n */\n\nConnectionPool.CONNECTION_CLOSED = 'connectionClosed';\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\n\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = 'connectionCheckOutStarted';\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\n\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = 'connectionCheckOutFailed';\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\n\nConnectionPool.CONNECTION_CHECKED_OUT = 'connectionCheckedOut';\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\n\nConnectionPool.CONNECTION_CHECKED_IN = 'connectionCheckedIn';\n\nfunction ensureMinPoolSize(pool) {\n  if (pool.closed || pool.options.minPoolSize === 0) {\n    return;\n  }\n\n  var minPoolSize = pool.options.minPoolSize;\n\n  for (var i = pool.totalConnectionCount; i < minPoolSize; ++i) {\n    createConnection(pool);\n  }\n\n  pool[kMinPoolSizeTimer] = setTimeout(function () {\n    return ensureMinPoolSize(pool);\n  }, 10);\n}\n\nfunction connectionIsStale(pool, connection) {\n  var serviceId = connection.serviceId;\n\n  if (pool.loadBalanced && serviceId) {\n    var sid = serviceId.toHexString();\n    var generation = pool.serviceGenerations.get(sid);\n    return connection.generation !== generation;\n  }\n\n  return connection.generation !== pool[kGeneration];\n}\n\nfunction connectionIsIdle(pool, connection) {\n  return !!(pool.options.maxIdleTimeMS && connection.idleTime > pool.options.maxIdleTimeMS);\n}\n\nfunction createConnection(pool, callback) {\n  var connectOptions = _objectSpread({}, pool.options, {\n    id: pool[kConnectionCounter].next().value,\n    generation: pool[kGeneration],\n    cancellationToken: pool[kCancellationToken]\n  });\n\n  pool[kPermits]--;\n  (0, connect_1.connect)(connectOptions, function (err, connection) {\n    if (err || !connection) {\n      pool[kPermits]++;\n      pool[kLogger].debug(\"connection attempt failed with error [\".concat(JSON.stringify(err), \"]\"));\n\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n\n      return;\n    } // The pool might have closed since we started trying to create a connection\n\n\n    if (pool.closed) {\n      connection.destroy({\n        force: true\n      });\n      return;\n    } // forward all events from the connection to the pool\n\n\n    var _loop = function _loop() {\n      var event = _arr[_i];\n      connection.on(event, function (e) {\n        return pool.emit(event, e);\n      });\n    };\n\n    for (var _i = 0, _arr = [].concat(_toConsumableArray(connection_1.APM_EVENTS), [connection_1.Connection.CLUSTER_TIME_RECEIVED]); _i < _arr.length; _i++) {\n      _loop();\n    }\n\n    pool.emit(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(pool, connection));\n\n    if (pool.loadBalanced) {\n      connection.on(connection_1.Connection.PINNED, function (pinType) {\n        return pool[kMetrics].markPinned(pinType);\n      });\n      connection.on(connection_1.Connection.UNPINNED, function (pinType) {\n        return pool[kMetrics].markUnpinned(pinType);\n      });\n      var serviceId = connection.serviceId;\n\n      if (serviceId) {\n        var generation;\n        var sid = serviceId.toHexString();\n\n        if (generation = pool.serviceGenerations.get(sid)) {\n          connection.generation = generation;\n        } else {\n          pool.serviceGenerations.set(sid, 0);\n          connection.generation = 0;\n        }\n      }\n    }\n\n    connection.markAvailable();\n    pool.emit(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(pool, connection)); // if a callback has been provided, check out the connection immediately\n\n    if (typeof callback === 'function') {\n      callback(undefined, connection);\n      return;\n    } // otherwise add it to the pool for later acquisition, and try to process the wait queue\n\n\n    pool[kConnections].push(connection);\n    process.nextTick(processWaitQueue, pool);\n  });\n}\n\nfunction destroyConnection(pool, connection, reason) {\n  pool.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(pool, connection, reason)); // allow more connections to be created\n\n  pool[kPermits]++; // destroy the connection\n\n  process.nextTick(function () {\n    return connection.destroy();\n  });\n}\n\nfunction processWaitQueue(pool) {\n  if (pool.closed || pool[kProcessingWaitQueue]) {\n    return;\n  }\n\n  pool[kProcessingWaitQueue] = true;\n\n  while (pool.waitQueueSize) {\n    var waitQueueMember = pool[kWaitQueue].peekFront();\n\n    if (!waitQueueMember) {\n      pool[kWaitQueue].shift();\n      continue;\n    }\n\n    if (waitQueueMember[kCancelled]) {\n      pool[kWaitQueue].shift();\n      continue;\n    }\n\n    if (!pool.availableConnectionCount) {\n      break;\n    }\n\n    var connection = pool[kConnections].shift();\n\n    if (!connection) {\n      break;\n    }\n\n    var isStale = connectionIsStale(pool, connection);\n    var isIdle = connectionIsIdle(pool, connection);\n\n    if (!isStale && !isIdle && !connection.closed) {\n      pool.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(pool, connection));\n\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n\n      pool[kWaitQueue].shift();\n      waitQueueMember.callback(undefined, connection);\n    } else {\n      var reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n      destroyConnection(pool, connection, reason);\n    }\n  }\n\n  var maxPoolSize = pool.options.maxPoolSize;\n\n  if (pool.waitQueueSize && (maxPoolSize <= 0 || pool.totalConnectionCount < maxPoolSize)) {\n    createConnection(pool, function (err, connection) {\n      var waitQueueMember = pool[kWaitQueue].shift();\n\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        if (!err && connection) {\n          pool[kConnections].push(connection);\n        }\n\n        pool[kProcessingWaitQueue] = false;\n        return;\n      }\n\n      if (err) {\n        pool.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(pool, err));\n      } else if (connection) {\n        pool.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(pool, connection));\n      }\n\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n\n      waitQueueMember.callback(err, connection);\n      pool[kProcessingWaitQueue] = false;\n      process.nextTick(function () {\n        return processWaitQueue(pool);\n      });\n    });\n  } else {\n    pool[kProcessingWaitQueue] = false;\n  }\n}\n\nexports.CMAP_EVENTS = [ConnectionPool.CONNECTION_POOL_CREATED, ConnectionPool.CONNECTION_POOL_CLOSED, ConnectionPool.CONNECTION_CREATED, ConnectionPool.CONNECTION_READY, ConnectionPool.CONNECTION_CLOSED, ConnectionPool.CONNECTION_CHECK_OUT_STARTED, ConnectionPool.CONNECTION_CHECK_OUT_FAILED, ConnectionPool.CONNECTION_CHECKED_OUT, ConnectionPool.CONNECTION_CHECKED_IN, ConnectionPool.CONNECTION_POOL_CLEARED];","map":null,"metadata":{},"sourceType":"script"}