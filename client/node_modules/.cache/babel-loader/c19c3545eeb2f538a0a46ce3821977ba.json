{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GSSAPI = void 0;\n\nvar auth_provider_1 = require(\"./auth_provider\");\n\nvar error_1 = require(\"../../error\");\n\nvar deps_1 = require(\"../../deps\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar dns = require(\"dns\");\n\nvar GSSAPI = /*#__PURE__*/function (_auth_provider_1$Auth) {\n  _inherits(GSSAPI, _auth_provider_1$Auth);\n\n  function GSSAPI() {\n    _classCallCheck(this, GSSAPI);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GSSAPI).apply(this, arguments));\n  }\n\n  _createClass(GSSAPI, [{\n    key: \"auth\",\n    value: function auth(authContext, callback) {\n      var connection = authContext.connection,\n          credentials = authContext.credentials;\n      if (credentials == null) return callback(new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication'));\n      var username = credentials.username;\n\n      function externalCommand(command, cb) {\n        return connection.command((0, utils_1.ns)('$external.$cmd'), command, undefined, cb);\n      }\n\n      makeKerberosClient(authContext, function (err, client) {\n        if (err) return callback(err);\n        if (client == null) return callback(new error_1.MongoMissingDependencyError('GSSAPI client missing'));\n        client.step('', function (err, payload) {\n          if (err) return callback(err);\n          externalCommand(saslStart(payload), function (err, result) {\n            if (err) return callback(err);\n            if (result == null) return callback();\n            negotiate(client, 10, result.payload, function (err, payload) {\n              if (err) return callback(err);\n              externalCommand(saslContinue(payload, result.conversationId), function (err, result) {\n                if (err) return callback(err);\n                if (result == null) return callback();\n                finalize(client, username, result.payload, function (err, payload) {\n                  if (err) return callback(err);\n                  externalCommand({\n                    saslContinue: 1,\n                    conversationId: result.conversationId,\n                    payload: payload\n                  }, function (err, result) {\n                    if (err) return callback(err);\n                    callback(undefined, result);\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    }\n  }]);\n\n  return GSSAPI;\n}(auth_provider_1.AuthProvider);\n\nexports.GSSAPI = GSSAPI;\n\nfunction makeKerberosClient(authContext, callback) {\n  var _a;\n\n  var hostAddress = authContext.options.hostAddress;\n  var credentials = authContext.credentials;\n\n  if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n    return callback(new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.'));\n  }\n\n  if ('kModuleError' in deps_1.Kerberos) {\n    return callback(deps_1.Kerberos['kModuleError']);\n  }\n\n  var initializeClient = deps_1.Kerberos.initializeClient;\n  var username = credentials.username,\n      password = credentials.password;\n  var mechanismProperties = credentials.mechanismProperties;\n  var serviceName = (_a = mechanismProperties.SERVICE_NAME) !== null && _a !== void 0 ? _a : 'mongodb';\n  performGssapiCanonicalizeHostName(hostAddress.host, mechanismProperties, function (err, host) {\n    if (err) return callback(err);\n    var initOptions = {};\n\n    if (password != null) {\n      Object.assign(initOptions, {\n        user: username,\n        password: password\n      });\n    }\n\n    var spn = \"\".concat(serviceName).concat(process.platform === 'win32' ? '/' : '@').concat(host);\n\n    if ('SERVICE_REALM' in mechanismProperties) {\n      spn = \"\".concat(spn, \"@\").concat(mechanismProperties.SERVICE_REALM);\n    }\n\n    initializeClient(spn, initOptions, function (err, client) {\n      // TODO(NODE-3483)\n      if (err) return callback(new error_1.MongoRuntimeError(err));\n      callback(undefined, client);\n    });\n  });\n}\n\nfunction saslStart(payload) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload: payload,\n    autoAuthorize: 1\n  };\n}\n\nfunction saslContinue(payload, conversationId) {\n  return {\n    saslContinue: 1,\n    conversationId: conversationId,\n    payload: payload\n  };\n}\n\nfunction negotiate(client, retries, payload, callback) {\n  client.step(payload, function (err, response) {\n    // Retries exhausted, raise error\n    if (err && retries === 0) return callback(err); // Adjust number of retries and call step again\n\n    if (err) return negotiate(client, retries - 1, payload, callback); // Return the payload\n\n    callback(undefined, response || '');\n  });\n}\n\nfunction finalize(client, user, payload, callback) {\n  // GSS Client Unwrap\n  client.unwrap(payload, function (err, response) {\n    if (err) return callback(err); // Wrap the response\n\n    client.wrap(response || '', {\n      user: user\n    }, function (err, wrapped) {\n      if (err) return callback(err); // Return the payload\n\n      callback(undefined, wrapped);\n    });\n  });\n}\n\nfunction performGssapiCanonicalizeHostName(host, mechanismProperties, callback) {\n  if (!mechanismProperties.gssapiCanonicalizeHostName) return callback(undefined, host); // Attempt to resolve the host name\n\n  dns.resolveCname(host, function (err, r) {\n    if (err) return callback(err); // Get the first resolve host id\n\n    if (Array.isArray(r) && r.length > 0) {\n      return callback(undefined, r[0]);\n    }\n\n    callback(undefined, host);\n  });\n}","map":null,"metadata":{},"sourceType":"script"}