{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListCollectionsCursor = exports.ListCollectionsOperation = void 0;\n\nvar command_1 = require(\"./command\");\n\nvar operation_1 = require(\"./operation\");\n\nvar utils_1 = require(\"../utils\");\n\nvar CONSTANTS = require(\"../constants\");\n\nvar abstract_cursor_1 = require(\"../cursor/abstract_cursor\");\n\nvar execute_operation_1 = require(\"./execute_operation\");\n\nvar LIST_COLLECTIONS_WIRE_VERSION = 3;\n/** @internal */\n\nvar ListCollectionsOperation = /*#__PURE__*/function (_command_1$CommandOpe) {\n  _inherits(ListCollectionsOperation, _command_1$CommandOpe);\n\n  function ListCollectionsOperation(db, filter, options) {\n    var _this;\n\n    _classCallCheck(this, ListCollectionsOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListCollectionsOperation).call(this, db, options));\n    _this.options = options !== null && options !== void 0 ? options : {};\n    _this.db = db;\n    _this.filter = filter;\n    _this.nameOnly = !!_this.options.nameOnly;\n    _this.authorizedCollections = !!_this.options.authorizedCollections;\n\n    if (typeof _this.options.batchSize === 'number') {\n      _this.batchSize = _this.options.batchSize;\n    }\n\n    return _this;\n  }\n\n  _createClass(ListCollectionsOperation, [{\n    key: \"execute\",\n    value: function execute(server, session, callback) {\n      if ((0, utils_1.maxWireVersion)(server) < LIST_COLLECTIONS_WIRE_VERSION) {\n        var filter = this.filter;\n        var databaseName = this.db.s.namespace.db; // If we have legacy mode and have not provided a full db name filter it\n\n        if (typeof filter.name === 'string' && !new RegExp(\"^\".concat(databaseName, \"\\\\.\")).test(filter.name)) {\n          filter = Object.assign({}, filter);\n          filter.name = this.db.s.namespace.withCollection(filter.name).toString();\n        } // No filter, filter by current database\n\n\n        if (filter == null) {\n          filter = {\n            name: \"/\".concat(databaseName, \"/\")\n          };\n        } // Rewrite the filter to use $and to filter out indexes\n\n\n        if (filter.name) {\n          filter = {\n            $and: [{\n              name: filter.name\n            }, {\n              name: /^((?!\\$).)*$/\n            }]\n          };\n        } else {\n          filter = {\n            name: /^((?!\\$).)*$/\n          };\n        }\n\n        var documentTransform = function documentTransform(doc) {\n          var matching = \"\".concat(databaseName, \".\");\n          var index = doc.name.indexOf(matching); // Remove database name if available\n\n          if (doc.name && index === 0) {\n            doc.name = doc.name.substr(index + matching.length);\n          }\n\n          return doc;\n        };\n\n        server.query(new utils_1.MongoDBNamespace(databaseName, CONSTANTS.SYSTEM_NAMESPACE_COLLECTION), {\n          query: filter\n        }, {\n          batchSize: this.batchSize || 1000,\n          readPreference: this.readPreference\n        }, function (err, result) {\n          if (result && result.documents && Array.isArray(result.documents)) {\n            result.documents = result.documents.map(documentTransform);\n          }\n\n          callback(err, result);\n        });\n        return;\n      }\n\n      return _get(_getPrototypeOf(ListCollectionsOperation.prototype), \"executeCommand\", this).call(this, server, session, this.generateCommand(), callback);\n    }\n    /* This is here for the purpose of unit testing the final command that gets sent. */\n\n  }, {\n    key: \"generateCommand\",\n    value: function generateCommand() {\n      return {\n        listCollections: 1,\n        filter: this.filter,\n        cursor: this.batchSize ? {\n          batchSize: this.batchSize\n        } : {},\n        nameOnly: this.nameOnly,\n        authorizedCollections: this.authorizedCollections\n      };\n    }\n  }]);\n\n  return ListCollectionsOperation;\n}(command_1.CommandOperation);\n\nexports.ListCollectionsOperation = ListCollectionsOperation;\n/** @public */\n\nvar ListCollectionsCursor = /*#__PURE__*/function (_abstract_cursor_1$Ab) {\n  _inherits(ListCollectionsCursor, _abstract_cursor_1$Ab);\n\n  function ListCollectionsCursor(db, filter, options) {\n    var _this2;\n\n    _classCallCheck(this, ListCollectionsCursor);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ListCollectionsCursor).call(this, (0, utils_1.getTopology)(db), db.s.namespace, options));\n    _this2.parent = db;\n    _this2.filter = filter;\n    _this2.options = options;\n    return _this2;\n  }\n\n  _createClass(ListCollectionsCursor, [{\n    key: \"clone\",\n    value: function clone() {\n      return new ListCollectionsCursor(this.parent, this.filter, _objectSpread({}, this.options, this.cursorOptions));\n    }\n    /** @internal */\n\n  }, {\n    key: \"_initialize\",\n    value: function _initialize(session, callback) {\n      var operation = new ListCollectionsOperation(this.parent, this.filter, _objectSpread({}, this.cursorOptions, this.options, {\n        session: session\n      }));\n      (0, execute_operation_1.executeOperation)((0, utils_1.getTopology)(this.parent), operation, function (err, response) {\n        if (err || response == null) return callback(err); // TODO: NODE-2882\n\n        callback(undefined, {\n          server: operation.server,\n          session: session,\n          response: response\n        });\n      });\n    }\n  }]);\n\n  return ListCollectionsCursor;\n}(abstract_cursor_1.AbstractCursor);\n\nexports.ListCollectionsCursor = ListCollectionsCursor;\n(0, operation_1.defineAspects)(ListCollectionsOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.CURSOR_CREATING]);","map":null,"metadata":{},"sourceType":"script"}