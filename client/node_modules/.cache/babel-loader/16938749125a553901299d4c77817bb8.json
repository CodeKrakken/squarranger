{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _objectSpread = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _defineProperty = require(\"/home/pea/Code/squarranger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _ref;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HEARTBEAT_EVENTS = exports.Server = void 0;\n\nvar logger_1 = require(\"../logger\");\n\nvar connection_pool_1 = require(\"../cmap/connection_pool\");\n\nvar server_description_1 = require(\"./server_description\");\n\nvar monitor_1 = require(\"./monitor\");\n\nvar transactions_1 = require(\"../transactions\");\n\nvar utils_1 = require(\"../utils\");\n\nvar common_1 = require(\"./common\");\n\nvar error_1 = require(\"../error\");\n\nvar connection_1 = require(\"../cmap/connection\");\n\nvar mongo_types_1 = require(\"../mongo_types\");\n\nvar utils_2 = require(\"../utils\");\n\nvar stateTransition = (0, utils_1.makeStateMachine)((_ref = {}, _defineProperty(_ref, common_1.STATE_CLOSED, [common_1.STATE_CLOSED, common_1.STATE_CONNECTING]), _defineProperty(_ref, common_1.STATE_CONNECTING, [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED]), _defineProperty(_ref, common_1.STATE_CONNECTED, [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED]), _defineProperty(_ref, common_1.STATE_CLOSING, [common_1.STATE_CLOSING, common_1.STATE_CLOSED]), _ref));\n/** @internal */\n\nvar kMonitor = Symbol('monitor');\n/** @internal */\n\nvar Server = /*#__PURE__*/function (_mongo_types_1$TypedE) {\n  _inherits(Server, _mongo_types_1$TypedE);\n\n  /**\n   * Create a server\n   */\n  function Server(topology, description, options) {\n    var _this;\n\n    _classCallCheck(this, Server);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Server).call(this));\n    _this.serverApi = options.serverApi;\n\n    var poolOptions = _objectSpread({\n      hostAddress: description.hostAddress\n    }, options);\n\n    _this.s = {\n      description: description,\n      options: options,\n      logger: new logger_1.Logger('Server'),\n      state: common_1.STATE_CLOSED,\n      topology: topology,\n      pool: new connection_pool_1.ConnectionPool(poolOptions)\n    };\n\n    var _loop = function _loop() {\n      var event = _arr[_i];\n\n      _this.s.pool.on(event, function (e) {\n        return _this.emit(event, e);\n      });\n    };\n\n    for (var _i = 0, _arr = [].concat(_toConsumableArray(connection_pool_1.CMAP_EVENTS), _toConsumableArray(connection_1.APM_EVENTS)); _i < _arr.length; _i++) {\n      _loop();\n    }\n\n    _this.s.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, function (clusterTime) {\n      _this.clusterTime = clusterTime;\n    }); // monitoring is disabled in load balancing mode\n\n\n    if (_this.loadBalanced) return _possibleConstructorReturn(_this); // create the monitor\n\n    _this[kMonitor] = new monitor_1.Monitor(_assertThisInitialized(_assertThisInitialized(_this)), _this.s.options);\n\n    var _iterator = _createForOfIteratorHelper(exports.HEARTBEAT_EVENTS),\n        _step;\n\n    try {\n      var _loop2 = function _loop2() {\n        var event = _step.value;\n\n        _this[kMonitor].on(event, function (e) {\n          return _this.emit(event, e);\n        });\n      };\n\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop2();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    _this[kMonitor].on('resetConnectionPool', function () {\n      _this.s.pool.clear();\n    });\n\n    _this[kMonitor].on('resetServer', function (error) {\n      return markServerUnknown(_assertThisInitialized(_assertThisInitialized(_this)), error);\n    });\n\n    _this[kMonitor].on(Server.SERVER_HEARTBEAT_SUCCEEDED, function (event) {\n      _this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(_this.description.hostAddress, event.reply, {\n        roundTripTime: calculateRoundTripTime(_this.description.roundTripTime, event.duration)\n      }));\n\n      if (_this.s.state === common_1.STATE_CONNECTING) {\n        stateTransition(_assertThisInitialized(_assertThisInitialized(_this)), common_1.STATE_CONNECTED);\n\n        _this.emit(Server.CONNECT, _assertThisInitialized(_assertThisInitialized(_this)));\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Server, [{\n    key: \"connect\",\n\n    /**\n     * Initiate server connect\n     */\n    value: function connect() {\n      if (this.s.state !== common_1.STATE_CLOSED) {\n        return;\n      }\n\n      stateTransition(this, common_1.STATE_CONNECTING); // If in load balancer mode we automatically set the server to\n      // a load balancer. It never transitions out of this state and\n      // has no monitor.\n\n      if (!this.loadBalanced) {\n        this[kMonitor].connect();\n      } else {\n        stateTransition(this, common_1.STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    }\n    /** Destroy the server connection */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy(options, callback) {\n      var _this2 = this;\n\n      if (typeof options === 'function') callback = options, options = {};\n      options = Object.assign({}, {\n        force: false\n      }, options);\n\n      if (this.s.state === common_1.STATE_CLOSED) {\n        if (typeof callback === 'function') {\n          callback();\n        }\n\n        return;\n      }\n\n      stateTransition(this, common_1.STATE_CLOSING);\n\n      if (!this.loadBalanced) {\n        this[kMonitor].close();\n      }\n\n      this.s.pool.close(options, function (err) {\n        stateTransition(_this2, common_1.STATE_CLOSED);\n\n        _this2.emit('closed');\n\n        if (typeof callback === 'function') {\n          callback(err);\n        }\n      });\n    }\n    /**\n     * Immediately schedule monitoring of this server. If there already an attempt being made\n     * this will be a no-op.\n     */\n\n  }, {\n    key: \"requestCheck\",\n    value: function requestCheck() {\n      if (!this.loadBalanced) {\n        this[kMonitor].requestCheck();\n      }\n    }\n  }, {\n    key: \"command\",\n    value: function command(ns, cmd, options, callback) {\n      var _this3 = this;\n\n      if (typeof options === 'function') {\n        callback = options, options = {}, options = options !== null && options !== void 0 ? options : {};\n      }\n\n      if (callback == null) {\n        throw new error_1.MongoInvalidArgumentError('Callback must be provided');\n      }\n\n      if (ns.db == null || typeof ns === 'string') {\n        throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n      }\n\n      if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n        callback(new error_1.MongoServerClosedError());\n        return;\n      } // Clone the options\n\n\n      var finalOptions = Object.assign({}, options, {\n        wireProtocolCommand: false\n      }); // There are cases where we need to flag the read preference not to get sent in\n      // the command, such as pre-5.0 servers attempting to perform an aggregate write\n      // with a non-primary read preference. In this case the effective read preference\n      // (primary) is not the same as the provided and must be removed completely.\n\n      if (finalOptions.omitReadPreference) {\n        delete finalOptions.readPreference;\n      } // error if collation not supported\n\n\n      if ((0, utils_1.collationNotSupported)(this, cmd)) {\n        callback(new error_1.MongoCompatibilityError(\"Server \".concat(this.name, \" does not support collation\")));\n        return;\n      }\n\n      var session = finalOptions.session;\n      var conn = session === null || session === void 0 ? void 0 : session.pinnedConnection; // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n      //       (and prevent them from being checked back in) at the point of operation execution.\n      //       This should be considered as part of the work for NODE-2882\n\n      if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n        this.s.pool.checkOut(function (err, checkedOut) {\n          if (err || checkedOut == null) {\n            if (callback) return callback(err);\n            return;\n          }\n\n          session.pin(checkedOut);\n\n          _this3.command(ns, cmd, finalOptions, callback);\n        });\n        return;\n      }\n\n      this.s.pool.withConnection(conn, function (err, conn, cb) {\n        if (err || !conn) {\n          markServerUnknown(_this3, err);\n          return cb(err);\n        }\n\n        conn.command(ns, cmd, finalOptions, makeOperationHandler(_this3, conn, cmd, finalOptions, cb));\n      }, callback);\n    }\n    /**\n     * Execute a query against the server\n     * @internal\n     */\n\n  }, {\n    key: \"query\",\n    value: function query(ns, cmd, options, callback) {\n      var _this4 = this;\n\n      if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n        callback(new error_1.MongoServerClosedError());\n        return;\n      }\n\n      this.s.pool.withConnection(undefined, function (err, conn, cb) {\n        if (err || !conn) {\n          markServerUnknown(_this4, err);\n          return cb(err);\n        }\n\n        conn.query(ns, cmd, options, makeOperationHandler(_this4, conn, cmd, options, cb));\n      }, callback);\n    }\n    /**\n     * Execute a `getMore` against the server\n     * @internal\n     */\n\n  }, {\n    key: \"getMore\",\n    value: function getMore(ns, cursorId, options, callback) {\n      var _this5 = this;\n\n      var _a;\n\n      if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n        callback(new error_1.MongoServerClosedError());\n        return;\n      }\n\n      this.s.pool.withConnection((_a = options.session) === null || _a === void 0 ? void 0 : _a.pinnedConnection, function (err, conn, cb) {\n        if (err || !conn) {\n          markServerUnknown(_this5, err);\n          return cb(err);\n        }\n\n        conn.getMore(ns, cursorId, options, makeOperationHandler(_this5, conn, {}, options, cb));\n      }, callback);\n    }\n    /**\n     * Execute a `killCursors` command against the server\n     * @internal\n     */\n\n  }, {\n    key: \"killCursors\",\n    value: function killCursors(ns, cursorIds, options, callback) {\n      var _this6 = this;\n\n      var _a;\n\n      if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n        if (typeof callback === 'function') {\n          callback(new error_1.MongoServerClosedError());\n        }\n\n        return;\n      }\n\n      this.s.pool.withConnection((_a = options.session) === null || _a === void 0 ? void 0 : _a.pinnedConnection, function (err, conn, cb) {\n        if (err || !conn) {\n          markServerUnknown(_this6, err);\n          return cb(err);\n        }\n\n        conn.killCursors(ns, cursorIds, options, makeOperationHandler(_this6, conn, {}, undefined, cb));\n      }, callback);\n    }\n  }, {\n    key: \"description\",\n    get: function get() {\n      return this.s.description;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.s.description.address;\n    }\n  }, {\n    key: \"autoEncrypter\",\n    get: function get() {\n      if (this.s.options && this.s.options.autoEncrypter) {\n        return this.s.options.autoEncrypter;\n      }\n    }\n  }, {\n    key: \"loadBalanced\",\n    get: function get() {\n      return this.s.topology.description.type === common_1.TopologyType.LoadBalanced;\n    }\n  }]);\n\n  return Server;\n}(mongo_types_1.TypedEventEmitter);\n\nexports.Server = Server;\n/** @event */\n\nServer.SERVER_HEARTBEAT_STARTED = 'serverHeartbeatStarted';\n/** @event */\n\nServer.SERVER_HEARTBEAT_SUCCEEDED = 'serverHeartbeatSucceeded';\n/** @event */\n\nServer.SERVER_HEARTBEAT_FAILED = 'serverHeartbeatFailed';\n/** @event */\n\nServer.CONNECT = 'connect';\n/** @event */\n\nServer.DESCRIPTION_RECEIVED = 'descriptionReceived';\n/** @event */\n\nServer.CLOSED = 'closed';\n/** @event */\n\nServer.ENDED = 'ended';\nexports.HEARTBEAT_EVENTS = [Server.SERVER_HEARTBEAT_STARTED, Server.SERVER_HEARTBEAT_SUCCEEDED, Server.SERVER_HEARTBEAT_FAILED];\nObject.defineProperty(Server.prototype, 'clusterTime', {\n  get: function get() {\n    return this.s.topology.clusterTime;\n  },\n  set: function set(clusterTime) {\n    this.s.topology.clusterTime = clusterTime;\n  }\n});\n\nfunction calculateRoundTripTime(oldRtt, duration) {\n  if (oldRtt === -1) {\n    return duration;\n  }\n\n  var alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\n\nfunction markServerUnknown(server, error) {\n  // Load balancer servers can never be marked unknown.\n  if (server.loadBalanced) {\n    return;\n  }\n\n  if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n    server[kMonitor].reset();\n  }\n\n  server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n    error: error,\n    topologyVersion: error && error.topologyVersion ? error.topologyVersion : server.description.topologyVersion\n  }));\n}\n\nfunction isPinnableCommand(cmd, session) {\n  if (session) {\n    return session.inTransaction() || 'aggregate' in cmd || 'find' in cmd || 'getMore' in cmd || 'listCollections' in cmd || 'listIndexes' in cmd;\n  }\n\n  return false;\n}\n\nfunction connectionIsStale(pool, connection) {\n  if (connection.serviceId) {\n    return connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString());\n  }\n\n  return connection.generation !== pool.generation;\n}\n\nfunction shouldHandleStateChangeError(server, err) {\n  var etv = err.topologyVersion;\n  var stv = server.description.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\n\nfunction inActiveTransaction(session, cmd) {\n  return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\n\n\nfunction isRetryableWritesEnabled(topology) {\n  return topology.s.options.retryWrites !== false;\n}\n\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n  var session = options === null || options === void 0 ? void 0 : options.session;\n  return function handleOperationResult(err, result) {\n    if (err && !connectionIsStale(server.s.pool, connection)) {\n      if (err instanceof error_1.MongoNetworkError) {\n        if (session && !session.hasEnded && session.serverSession) {\n          session.serverSession.isDirty = true;\n        } // inActiveTransaction check handles commit and abort.\n\n\n        if (inActiveTransaction(session, cmd) && !err.hasErrorLabel('TransientTransactionError')) {\n          err.addErrorLabel('TransientTransactionError');\n        }\n\n        if ((isRetryableWritesEnabled(server.s.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, utils_2.supportsRetryableWrites)(server) && !inActiveTransaction(session, cmd)) {\n          err.addErrorLabel('RetryableWriteError');\n        }\n\n        if (!(err instanceof error_1.MongoNetworkTimeoutError) || (0, error_1.isNetworkErrorBeforeHandshake)(err)) {\n          // In load balanced mode we never mark the server as unknown and always\n          // clear for the specific service id.\n          server.s.pool.clear(connection.serviceId);\n\n          if (!server.loadBalanced) {\n            markServerUnknown(server, err);\n          }\n        }\n      } else {\n        // if pre-4.4 server, then add error label if its a retryable write error\n        if ((isRetryableWritesEnabled(server.s.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, utils_1.maxWireVersion)(server) < 9 && (0, error_1.isRetryableWriteError)(err) && !inActiveTransaction(session, cmd)) {\n          err.addErrorLabel('RetryableWriteError');\n        }\n\n        if ((0, error_1.isSDAMUnrecoverableError)(err)) {\n          if (shouldHandleStateChangeError(server, err)) {\n            if ((0, utils_1.maxWireVersion)(server) <= 7 || (0, error_1.isNodeShuttingDownError)(err)) {\n              server.s.pool.clear(connection.serviceId);\n            }\n\n            if (!server.loadBalanced) {\n              markServerUnknown(server, err);\n              process.nextTick(function () {\n                return server.requestCheck();\n              });\n            }\n          }\n        }\n      }\n\n      if (session && session.isPinned && err.hasErrorLabel('TransientTransactionError')) {\n        session.unpin({\n          force: true\n        });\n      }\n    }\n\n    callback(err, result);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}