{"ast":null,"code":"var _jsxFileName = \"/home/pea/Code/squarranger/client/src/components/Voice.js\",\n    _s = $RefreshSig$();\n\nimport Box from \"./Box\";\nimport { useContext } from \"react\";\nimport { Context } from '../contexts/Context';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Voice = _ref => {\n  _s();\n\n  let {\n    voiceId\n  } = _ref;\n  const context = useContext(Context);\n  return context && context.state && context.state.voices && context.state.voices[voiceId] ? context.state.voices[voiceId].map((box, i) => {\n    let id = i + 1;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      index: id,\n      checkStatus: box,\n      voiceId: voiceId\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this);\n  }) : '';\n};\n\n_s(Voice, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\n_c = Voice;\nexport default Voice;\n\nvar _c;\n\n$RefreshReg$(_c, \"Voice\");","map":{"version":3,"sources":["/home/pea/Code/squarranger/client/src/components/Voice.js"],"names":["Box","useContext","Context","React","Voice","voiceId","context","state","voices","map","box","i","id"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,OAAhB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,KAAK,GAAG,QAAe;AAAA;;AAAA,MAAd;AAACC,IAAAA;AAAD,GAAc;AAE3B,QAAMC,OAAO,GAAGL,UAAU,CAACC,OAAD,CAA1B;AAEA,SAAOI,OAAO,IAAIA,OAAO,CAACC,KAAnB,IAA4BD,OAAO,CAACC,KAAR,CAAcC,MAA1C,IAAoDF,OAAO,CAACC,KAAR,CAAcC,MAAd,CAAqBH,OAArB,CAApD,GACLC,OAAO,CAACC,KAAR,CAAcC,MAAd,CAAqBH,OAArB,EAA8BI,GAA9B,CAAkC,CAACC,GAAD,EAAMC,CAAN,KAAY;AAE5C,QAAIC,EAAE,GAAGD,CAAC,GAAC,CAAX;AACA,wBACE,QAAC,GAAD;AAEE,MAAA,KAAK,EAAEC,EAFT;AAGE,MAAA,WAAW,EAAEF,GAHf;AAIE,MAAA,OAAO,EAAEL;AAJX,OACOO,EADP;AAAA;AAAA;AAAA;AAAA,YADF;AAQD,GAXD,CADK,GAaF,EAbL;AAcD,CAlBD;;GAAMR,K;;KAAAA,K;AAoBN,eAAeA,KAAf","sourcesContent":["import Box from \"./Box\";\nimport { useContext } from \"react\";\nimport { Context } from '../contexts/Context'\nimport React from 'react';\n\nconst Voice = ({voiceId}) => {\n\n  const context = useContext(Context)\n\n  return context && context.state && context.state.voices && context.state.voices[voiceId] ? (\n    context.state.voices[voiceId].map((box, i) => {\n\n      let id = i+1\n      return (\n        <Box\n          key={id}\n          index={id}\n          checkStatus={box}\n          voiceId={voiceId}\n        />\n      )\n    }\n  )) : ''\n}\n \nexport default Voice;"]},"metadata":{},"sourceType":"module"}